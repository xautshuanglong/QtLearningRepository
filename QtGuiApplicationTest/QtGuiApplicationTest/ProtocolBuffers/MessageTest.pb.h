// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageTest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MessageTest_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_MessageTest_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_MessageTest_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MessageTest_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_MessageTest_2eproto;
class MsgTest;
struct MsgTestDefaultTypeInternal;
extern MsgTestDefaultTypeInternal _MsgTest_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template <>
::MsgTest* Arena::CreateMaybeMessage<::MsgTest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE


// ===================================================================


// -------------------------------------------------------------------

class MsgTest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MsgTest) */ {
 public:
  inline MsgTest() : MsgTest(nullptr) {}
  ~MsgTest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgTest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgTest(const MsgTest& from);
  MsgTest(MsgTest&& from) noexcept
    : MsgTest() {
    *this = ::std::move(from);
  }

  inline MsgTest& operator=(const MsgTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgTest& operator=(MsgTest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgTest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgTest* internal_default_instance() {
    return reinterpret_cast<const MsgTest*>(
               &_MsgTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgTest& a, MsgTest& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgTest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgTest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgTest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgTest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgTest& from) {
    MsgTest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgTest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MsgTest";
  }
  protected:
  explicit MsgTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBytesTestFieldNumber = 3,
    kStringTestFieldNumber = 4,
    kIntTestFieldNumber = 1,
    kUintTestFieldNumber = 2,
  };
  // bytes bytesTest = 3;
  void clear_bytestest() ;
  const std::string& bytestest() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bytestest(Arg_&& arg, Args_... args);
  std::string* mutable_bytestest();
  PROTOBUF_NODISCARD std::string* release_bytestest();
  void set_allocated_bytestest(std::string* ptr);

  private:
  const std::string& _internal_bytestest() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytestest(
      const std::string& value);
  std::string* _internal_mutable_bytestest();

  public:
  // string stringTest = 4;
  void clear_stringtest() ;
  const std::string& stringtest() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stringtest(Arg_&& arg, Args_... args);
  std::string* mutable_stringtest();
  PROTOBUF_NODISCARD std::string* release_stringtest();
  void set_allocated_stringtest(std::string* ptr);

  private:
  const std::string& _internal_stringtest() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stringtest(
      const std::string& value);
  std::string* _internal_mutable_stringtest();

  public:
  // int32 intTest = 1;
  void clear_inttest() ;
  ::int32_t inttest() const;
  void set_inttest(::int32_t value);

  private:
  ::int32_t _internal_inttest() const;
  void _internal_set_inttest(::int32_t value);

  public:
  // uint32 uintTest = 2;
  void clear_uinttest() ;
  ::uint32_t uinttest() const;
  void set_uinttest(::uint32_t value);

  private:
  ::uint32_t _internal_uinttest() const;
  void _internal_set_uinttest(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:MsgTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytestest_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stringtest_;
    ::int32_t inttest_;
    ::uint32_t uinttest_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MessageTest_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MsgTest

// int32 intTest = 1;
inline void MsgTest::clear_inttest() {
  _impl_.inttest_ = 0;
}
inline ::int32_t MsgTest::inttest() const {
  // @@protoc_insertion_point(field_get:MsgTest.intTest)
  return _internal_inttest();
}
inline void MsgTest::set_inttest(::int32_t value) {
  _internal_set_inttest(value);
  // @@protoc_insertion_point(field_set:MsgTest.intTest)
}
inline ::int32_t MsgTest::_internal_inttest() const {
  return _impl_.inttest_;
}
inline void MsgTest::_internal_set_inttest(::int32_t value) {
  ;
  _impl_.inttest_ = value;
}

// uint32 uintTest = 2;
inline void MsgTest::clear_uinttest() {
  _impl_.uinttest_ = 0u;
}
inline ::uint32_t MsgTest::uinttest() const {
  // @@protoc_insertion_point(field_get:MsgTest.uintTest)
  return _internal_uinttest();
}
inline void MsgTest::set_uinttest(::uint32_t value) {
  _internal_set_uinttest(value);
  // @@protoc_insertion_point(field_set:MsgTest.uintTest)
}
inline ::uint32_t MsgTest::_internal_uinttest() const {
  return _impl_.uinttest_;
}
inline void MsgTest::_internal_set_uinttest(::uint32_t value) {
  ;
  _impl_.uinttest_ = value;
}

// bytes bytesTest = 3;
inline void MsgTest::clear_bytestest() {
  _impl_.bytestest_.ClearToEmpty();
}
inline const std::string& MsgTest::bytestest() const {
  // @@protoc_insertion_point(field_get:MsgTest.bytesTest)
  return _internal_bytestest();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgTest::set_bytestest(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.bytestest_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MsgTest.bytesTest)
}
inline std::string* MsgTest::mutable_bytestest() {
  std::string* _s = _internal_mutable_bytestest();
  // @@protoc_insertion_point(field_mutable:MsgTest.bytesTest)
  return _s;
}
inline const std::string& MsgTest::_internal_bytestest() const {
  return _impl_.bytestest_.Get();
}
inline void MsgTest::_internal_set_bytestest(const std::string& value) {
  ;


  _impl_.bytestest_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgTest::_internal_mutable_bytestest() {
  ;
  return _impl_.bytestest_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgTest::release_bytestest() {
  // @@protoc_insertion_point(field_release:MsgTest.bytesTest)
  return _impl_.bytestest_.Release();
}
inline void MsgTest::set_allocated_bytestest(std::string* value) {
  _impl_.bytestest_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bytestest_.IsDefault()) {
          _impl_.bytestest_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MsgTest.bytesTest)
}

// string stringTest = 4;
inline void MsgTest::clear_stringtest() {
  _impl_.stringtest_.ClearToEmpty();
}
inline const std::string& MsgTest::stringtest() const {
  // @@protoc_insertion_point(field_get:MsgTest.stringTest)
  return _internal_stringtest();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgTest::set_stringtest(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.stringtest_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MsgTest.stringTest)
}
inline std::string* MsgTest::mutable_stringtest() {
  std::string* _s = _internal_mutable_stringtest();
  // @@protoc_insertion_point(field_mutable:MsgTest.stringTest)
  return _s;
}
inline const std::string& MsgTest::_internal_stringtest() const {
  return _impl_.stringtest_.Get();
}
inline void MsgTest::_internal_set_stringtest(const std::string& value) {
  ;


  _impl_.stringtest_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgTest::_internal_mutable_stringtest() {
  ;
  return _impl_.stringtest_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgTest::release_stringtest() {
  // @@protoc_insertion_point(field_release:MsgTest.stringTest)
  return _impl_.stringtest_.Release();
}
inline void MsgTest::set_allocated_stringtest(std::string* value) {
  _impl_.stringtest_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.stringtest_.IsDefault()) {
          _impl_.stringtest_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MsgTest.stringTest)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_MessageTest_2eproto_2epb_2eh
