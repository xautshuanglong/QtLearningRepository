// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageTest.proto

#include "MessageTest.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
template <typename>
PROTOBUF_CONSTEXPR MsgTest::MsgTest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bytestest_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.stringtest_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.inttest_)*/ 0

  , /*decltype(_impl_.uinttest_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgTestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgTestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgTestDefaultTypeInternal() {}
  union {
    MsgTest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgTestDefaultTypeInternal _MsgTest_default_instance_;
static ::_pb::Metadata file_level_metadata_MessageTest_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_MessageTest_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_MessageTest_2eproto = nullptr;
const ::uint32_t TableStruct_MessageTest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::MsgTest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::MsgTest, _impl_.inttest_),
    PROTOBUF_FIELD_OFFSET(::MsgTest, _impl_.uinttest_),
    PROTOBUF_FIELD_OFFSET(::MsgTest, _impl_.bytestest_),
    PROTOBUF_FIELD_OFFSET(::MsgTest, _impl_.stringtest_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::MsgTest)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_MsgTest_default_instance_._instance,
};
const char descriptor_table_protodef_MessageTest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\021MessageTest.proto\"S\n\007MsgTest\022\017\n\007intTes"
    "t\030\001 \001(\005\022\020\n\010uintTest\030\002 \001(\r\022\021\n\tbytesTest\030\003"
    " \001(\014\022\022\n\nstringTest\030\004 \001(\tb\006proto3"
};
static ::absl::once_flag descriptor_table_MessageTest_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MessageTest_2eproto = {
    false,
    false,
    112,
    descriptor_table_protodef_MessageTest_2eproto,
    "MessageTest.proto",
    &descriptor_table_MessageTest_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_MessageTest_2eproto::offsets,
    file_level_metadata_MessageTest_2eproto,
    file_level_enum_descriptors_MessageTest_2eproto,
    file_level_service_descriptors_MessageTest_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MessageTest_2eproto_getter() {
  return &descriptor_table_MessageTest_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MessageTest_2eproto(&descriptor_table_MessageTest_2eproto);
// ===================================================================

class MsgTest::_Internal {
 public:
};

MsgTest::MsgTest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MsgTest)
}
MsgTest::MsgTest(const MsgTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgTest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bytestest_) {}

    , decltype(_impl_.stringtest_) {}

    , decltype(_impl_.inttest_) {}

    , decltype(_impl_.uinttest_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bytestest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bytestest_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bytestest().empty()) {
    _this->_impl_.bytestest_.Set(from._internal_bytestest(), _this->GetArenaForAllocation());
  }
  _impl_.stringtest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.stringtest_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stringtest().empty()) {
    _this->_impl_.stringtest_.Set(from._internal_stringtest(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.inttest_, &from._impl_.inttest_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.uinttest_) -
    reinterpret_cast<char*>(&_impl_.inttest_)) + sizeof(_impl_.uinttest_));
  // @@protoc_insertion_point(copy_constructor:MsgTest)
}

inline void MsgTest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.bytestest_) {}

    , decltype(_impl_.stringtest_) {}

    , decltype(_impl_.inttest_) { 0 }

    , decltype(_impl_.uinttest_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bytestest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bytestest_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stringtest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.stringtest_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgTest::~MsgTest() {
  // @@protoc_insertion_point(destructor:MsgTest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgTest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bytestest_.Destroy();
  _impl_.stringtest_.Destroy();
}

void MsgTest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgTest::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgTest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bytestest_.ClearToEmpty();
  _impl_.stringtest_.ClearToEmpty();
  ::memset(&_impl_.inttest_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.uinttest_) -
      reinterpret_cast<char*>(&_impl_.inttest_)) + sizeof(_impl_.uinttest_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgTest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 intTest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.inttest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 uintTest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.uinttest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes bytesTest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_bytestest();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string stringTest = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_stringtest();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MsgTest.stringTest"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgTest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgTest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 intTest = 1;
  if (this->_internal_inttest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_inttest(), target);
  }

  // uint32 uintTest = 2;
  if (this->_internal_uinttest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_uinttest(), target);
  }

  // bytes bytesTest = 3;
  if (!this->_internal_bytestest().empty()) {
    const std::string& _s = this->_internal_bytestest();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  // string stringTest = 4;
  if (!this->_internal_stringtest().empty()) {
    const std::string& _s = this->_internal_stringtest();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "MsgTest.stringTest");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MsgTest)
  return target;
}

::size_t MsgTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MsgTest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes bytesTest = 3;
  if (!this->_internal_bytestest().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_bytestest());
  }

  // string stringTest = 4;
  if (!this->_internal_stringtest().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_stringtest());
  }

  // int32 intTest = 1;
  if (this->_internal_inttest() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_inttest());
  }

  // uint32 uintTest = 2;
  if (this->_internal_uinttest() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_uinttest());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgTest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgTest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgTest::GetClassData() const { return &_class_data_; }


void MsgTest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgTest*>(&to_msg);
  auto& from = static_cast<const MsgTest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MsgTest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bytestest().empty()) {
    _this->_internal_set_bytestest(from._internal_bytestest());
  }
  if (!from._internal_stringtest().empty()) {
    _this->_internal_set_stringtest(from._internal_stringtest());
  }
  if (from._internal_inttest() != 0) {
    _this->_internal_set_inttest(from._internal_inttest());
  }
  if (from._internal_uinttest() != 0) {
    _this->_internal_set_uinttest(from._internal_uinttest());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgTest::CopyFrom(const MsgTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTest::IsInitialized() const {
  return true;
}

void MsgTest::InternalSwap(MsgTest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bytestest_, lhs_arena,
                                       &other->_impl_.bytestest_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.stringtest_, lhs_arena,
                                       &other->_impl_.stringtest_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgTest, _impl_.uinttest_)
      + sizeof(MsgTest::_impl_.uinttest_)
      - PROTOBUF_FIELD_OFFSET(MsgTest, _impl_.inttest_)>(
          reinterpret_cast<char*>(&_impl_.inttest_),
          reinterpret_cast<char*>(&other->_impl_.inttest_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgTest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_MessageTest_2eproto_getter, &descriptor_table_MessageTest_2eproto_once,
      file_level_metadata_MessageTest_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MsgTest*
Arena::CreateMaybeMessage< ::MsgTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MsgTest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
