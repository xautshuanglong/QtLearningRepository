// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageInfo.proto

#ifndef PROTOBUF_INCLUDED_MessageInfo_2eproto
#define PROTOBUF_INCLUDED_MessageInfo_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_MessageInfo_2eproto 

namespace protobuf_MessageInfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_MessageInfo_2eproto
namespace com {
namespace genomics {
namespace protobuf {
class MessageBody;
class MessageBodyDefaultTypeInternal;
extern MessageBodyDefaultTypeInternal _MessageBody_default_instance_;
class MessageCommand;
class MessageCommandDefaultTypeInternal;
extern MessageCommandDefaultTypeInternal _MessageCommand_default_instance_;
class MessageHeader;
class MessageHeaderDefaultTypeInternal;
extern MessageHeaderDefaultTypeInternal _MessageHeader_default_instance_;
class MessageInfo;
class MessageInfoDefaultTypeInternal;
extern MessageInfoDefaultTypeInternal _MessageInfo_default_instance_;
class MessagePull;
class MessagePullDefaultTypeInternal;
extern MessagePullDefaultTypeInternal _MessagePull_default_instance_;
class MessagePush;
class MessagePushDefaultTypeInternal;
extern MessagePushDefaultTypeInternal _MessagePush_default_instance_;
class MessageRequest;
class MessageRequestDefaultTypeInternal;
extern MessageRequestDefaultTypeInternal _MessageRequest_default_instance_;
class MessageResponse;
class MessageResponseDefaultTypeInternal;
extern MessageResponseDefaultTypeInternal _MessageResponse_default_instance_;
}  // namespace protobuf
}  // namespace genomics
}  // namespace com
namespace google {
namespace protobuf {
template<> ::com::genomics::protobuf::MessageBody* Arena::CreateMaybeMessage<::com::genomics::protobuf::MessageBody>(Arena*);
template<> ::com::genomics::protobuf::MessageCommand* Arena::CreateMaybeMessage<::com::genomics::protobuf::MessageCommand>(Arena*);
template<> ::com::genomics::protobuf::MessageHeader* Arena::CreateMaybeMessage<::com::genomics::protobuf::MessageHeader>(Arena*);
template<> ::com::genomics::protobuf::MessageInfo* Arena::CreateMaybeMessage<::com::genomics::protobuf::MessageInfo>(Arena*);
template<> ::com::genomics::protobuf::MessagePull* Arena::CreateMaybeMessage<::com::genomics::protobuf::MessagePull>(Arena*);
template<> ::com::genomics::protobuf::MessagePush* Arena::CreateMaybeMessage<::com::genomics::protobuf::MessagePush>(Arena*);
template<> ::com::genomics::protobuf::MessageRequest* Arena::CreateMaybeMessage<::com::genomics::protobuf::MessageRequest>(Arena*);
template<> ::com::genomics::protobuf::MessageResponse* Arena::CreateMaybeMessage<::com::genomics::protobuf::MessageResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace com {
namespace genomics {
namespace protobuf {

enum MsgType {
  MsgTypeUnknow = 0,
  MsgTypeRequest = 100,
  MsgTypeResponse = 101,
  MsgTypePush = 102,
  MsgTypePull = 103,
  MsgTypeCommand = 104,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MsgType_IsValid(int value);
const MsgType MsgType_MIN = MsgTypeUnknow;
const MsgType MsgType_MAX = MsgTypeCommand;
const int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgType_descriptor();
inline const ::std::string& MsgType_Name(MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgType_descriptor(), value);
}
inline bool MsgType_Parse(
    const ::std::string& name, MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
enum RequestType {
  ReqTypeUnknow = 0,
  ReqTypePdfFile = 200,
  ReqTypePdfPage = 201,
  RequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RequestType_IsValid(int value);
const RequestType RequestType_MIN = ReqTypeUnknow;
const RequestType RequestType_MAX = ReqTypePdfPage;
const int RequestType_ARRAYSIZE = RequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RequestType_descriptor();
inline const ::std::string& RequestType_Name(RequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RequestType_descriptor(), value);
}
inline bool RequestType_Parse(
    const ::std::string& name, RequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RequestType>(
    RequestType_descriptor(), name, value);
}
enum ResponseType {
  ResTypeSaveSuccess = 0,
  ResTypeFileNotFound = 1,
  ResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ResponseType_IsValid(int value);
const ResponseType ResponseType_MIN = ResTypeSaveSuccess;
const ResponseType ResponseType_MAX = ResTypeFileNotFound;
const int ResponseType_ARRAYSIZE = ResponseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResponseType_descriptor();
inline const ::std::string& ResponseType_Name(ResponseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResponseType_descriptor(), value);
}
inline bool ResponseType_Parse(
    const ::std::string& name, ResponseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseType>(
    ResponseType_descriptor(), name, value);
}
// ===================================================================

class MessageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.genomics.protobuf.MessageRequest) */ {
 public:
  MessageRequest();
  virtual ~MessageRequest();

  MessageRequest(const MessageRequest& from);

  inline MessageRequest& operator=(const MessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessageRequest(MessageRequest&& from) noexcept
    : MessageRequest() {
    *this = ::std::move(from);
  }

  inline MessageRequest& operator=(MessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageRequest* internal_default_instance() {
    return reinterpret_cast<const MessageRequest*>(
               &_MessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MessageRequest* other);
  friend void swap(MessageRequest& a, MessageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageRequest* New() const final {
    return CreateMaybeMessage<MessageRequest>(NULL);
  }

  MessageRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MessageRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MessageRequest& from);
  void MergeFrom(const MessageRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // uint32 requestID = 1;
  void clear_requestid();
  static const int kRequestIDFieldNumber = 1;
  ::google::protobuf::uint32 requestid() const;
  void set_requestid(::google::protobuf::uint32 value);

  // .com.genomics.protobuf.RequestType requestType = 2;
  void clear_requesttype();
  static const int kRequestTypeFieldNumber = 2;
  ::com::genomics::protobuf::RequestType requesttype() const;
  void set_requesttype(::com::genomics::protobuf::RequestType value);

  // @@protoc_insertion_point(class_scope:com.genomics.protobuf.MessageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::uint32 requestid_;
  int requesttype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_MessageInfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MessageResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.genomics.protobuf.MessageResponse) */ {
 public:
  MessageResponse();
  virtual ~MessageResponse();

  MessageResponse(const MessageResponse& from);

  inline MessageResponse& operator=(const MessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessageResponse(MessageResponse&& from) noexcept
    : MessageResponse() {
    *this = ::std::move(from);
  }

  inline MessageResponse& operator=(MessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageResponse* internal_default_instance() {
    return reinterpret_cast<const MessageResponse*>(
               &_MessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MessageResponse* other);
  friend void swap(MessageResponse& a, MessageResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageResponse* New() const final {
    return CreateMaybeMessage<MessageResponse>(NULL);
  }

  MessageResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MessageResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MessageResponse& from);
  void MergeFrom(const MessageResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // uint32 responseID = 1;
  void clear_responseid();
  static const int kResponseIDFieldNumber = 1;
  ::google::protobuf::uint32 responseid() const;
  void set_responseid(::google::protobuf::uint32 value);

  // .com.genomics.protobuf.ResponseType responseType = 2;
  void clear_responsetype();
  static const int kResponseTypeFieldNumber = 2;
  ::com::genomics::protobuf::ResponseType responsetype() const;
  void set_responsetype(::com::genomics::protobuf::ResponseType value);

  // @@protoc_insertion_point(class_scope:com.genomics.protobuf.MessageResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::uint32 responseid_;
  int responsetype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_MessageInfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MessagePush : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.genomics.protobuf.MessagePush) */ {
 public:
  MessagePush();
  virtual ~MessagePush();

  MessagePush(const MessagePush& from);

  inline MessagePush& operator=(const MessagePush& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessagePush(MessagePush&& from) noexcept
    : MessagePush() {
    *this = ::std::move(from);
  }

  inline MessagePush& operator=(MessagePush&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MessagePush& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessagePush* internal_default_instance() {
    return reinterpret_cast<const MessagePush*>(
               &_MessagePush_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(MessagePush* other);
  friend void swap(MessagePush& a, MessagePush& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessagePush* New() const final {
    return CreateMaybeMessage<MessagePush>(NULL);
  }

  MessagePush* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MessagePush>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MessagePush& from);
  void MergeFrom(const MessagePush& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessagePush* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.genomics.protobuf.MessagePush)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_MessageInfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MessagePull : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.genomics.protobuf.MessagePull) */ {
 public:
  MessagePull();
  virtual ~MessagePull();

  MessagePull(const MessagePull& from);

  inline MessagePull& operator=(const MessagePull& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessagePull(MessagePull&& from) noexcept
    : MessagePull() {
    *this = ::std::move(from);
  }

  inline MessagePull& operator=(MessagePull&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MessagePull& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessagePull* internal_default_instance() {
    return reinterpret_cast<const MessagePull*>(
               &_MessagePull_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(MessagePull* other);
  friend void swap(MessagePull& a, MessagePull& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessagePull* New() const final {
    return CreateMaybeMessage<MessagePull>(NULL);
  }

  MessagePull* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MessagePull>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MessagePull& from);
  void MergeFrom(const MessagePull& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessagePull* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.genomics.protobuf.MessagePull)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_MessageInfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MessageCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.genomics.protobuf.MessageCommand) */ {
 public:
  MessageCommand();
  virtual ~MessageCommand();

  MessageCommand(const MessageCommand& from);

  inline MessageCommand& operator=(const MessageCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessageCommand(MessageCommand&& from) noexcept
    : MessageCommand() {
    *this = ::std::move(from);
  }

  inline MessageCommand& operator=(MessageCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageCommand* internal_default_instance() {
    return reinterpret_cast<const MessageCommand*>(
               &_MessageCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(MessageCommand* other);
  friend void swap(MessageCommand& a, MessageCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageCommand* New() const final {
    return CreateMaybeMessage<MessageCommand>(NULL);
  }

  MessageCommand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MessageCommand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MessageCommand& from);
  void MergeFrom(const MessageCommand& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cmd = 1;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  const ::std::string& cmd() const;
  void set_cmd(const ::std::string& value);
  #if LANG_CXX11
  void set_cmd(::std::string&& value);
  #endif
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  ::std::string* mutable_cmd();
  ::std::string* release_cmd();
  void set_allocated_cmd(::std::string* cmd);

  // string xmlFilename = 2;
  void clear_xmlfilename();
  static const int kXmlFilenameFieldNumber = 2;
  const ::std::string& xmlfilename() const;
  void set_xmlfilename(const ::std::string& value);
  #if LANG_CXX11
  void set_xmlfilename(::std::string&& value);
  #endif
  void set_xmlfilename(const char* value);
  void set_xmlfilename(const char* value, size_t size);
  ::std::string* mutable_xmlfilename();
  ::std::string* release_xmlfilename();
  void set_allocated_xmlfilename(::std::string* xmlfilename);

  // string xslFilename = 3;
  void clear_xslfilename();
  static const int kXslFilenameFieldNumber = 3;
  const ::std::string& xslfilename() const;
  void set_xslfilename(const ::std::string& value);
  #if LANG_CXX11
  void set_xslfilename(::std::string&& value);
  #endif
  void set_xslfilename(const char* value);
  void set_xslfilename(const char* value, size_t size);
  ::std::string* mutable_xslfilename();
  ::std::string* release_xslfilename();
  void set_allocated_xslfilename(::std::string* xslfilename);

  // string outFilename = 4;
  void clear_outfilename();
  static const int kOutFilenameFieldNumber = 4;
  const ::std::string& outfilename() const;
  void set_outfilename(const ::std::string& value);
  #if LANG_CXX11
  void set_outfilename(::std::string&& value);
  #endif
  void set_outfilename(const char* value);
  void set_outfilename(const char* value, size_t size);
  ::std::string* mutable_outfilename();
  ::std::string* release_outfilename();
  void set_allocated_outfilename(::std::string* outfilename);

  // @@protoc_insertion_point(class_scope:com.genomics.protobuf.MessageCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cmd_;
  ::google::protobuf::internal::ArenaStringPtr xmlfilename_;
  ::google::protobuf::internal::ArenaStringPtr xslfilename_;
  ::google::protobuf::internal::ArenaStringPtr outfilename_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_MessageInfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MessageHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.genomics.protobuf.MessageHeader) */ {
 public:
  MessageHeader();
  virtual ~MessageHeader();

  MessageHeader(const MessageHeader& from);

  inline MessageHeader& operator=(const MessageHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessageHeader(MessageHeader&& from) noexcept
    : MessageHeader() {
    *this = ::std::move(from);
  }

  inline MessageHeader& operator=(MessageHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageHeader* internal_default_instance() {
    return reinterpret_cast<const MessageHeader*>(
               &_MessageHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(MessageHeader* other);
  friend void swap(MessageHeader& a, MessageHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageHeader* New() const final {
    return CreateMaybeMessage<MessageHeader>(NULL);
  }

  MessageHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MessageHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MessageHeader& from);
  void MergeFrom(const MessageHeader& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // uint32 msgID = 2;
  void clear_msgid();
  static const int kMsgIDFieldNumber = 2;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // .com.genomics.protobuf.MsgType msgType = 3;
  void clear_msgtype();
  static const int kMsgTypeFieldNumber = 3;
  ::com::genomics::protobuf::MsgType msgtype() const;
  void set_msgtype(::com::genomics::protobuf::MsgType value);

  // @@protoc_insertion_point(class_scope:com.genomics.protobuf.MessageHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 msgid_;
  int msgtype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_MessageInfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MessageBody : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.genomics.protobuf.MessageBody) */ {
 public:
  MessageBody();
  virtual ~MessageBody();

  MessageBody(const MessageBody& from);

  inline MessageBody& operator=(const MessageBody& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessageBody(MessageBody&& from) noexcept
    : MessageBody() {
    *this = ::std::move(from);
  }

  inline MessageBody& operator=(MessageBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageBody* internal_default_instance() {
    return reinterpret_cast<const MessageBody*>(
               &_MessageBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(MessageBody* other);
  friend void swap(MessageBody& a, MessageBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageBody* New() const final {
    return CreateMaybeMessage<MessageBody>(NULL);
  }

  MessageBody* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MessageBody>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MessageBody& from);
  void MergeFrom(const MessageBody& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.genomics.protobuf.MessageRequest msgRequest = 1;
  bool has_msgrequest() const;
  void clear_msgrequest();
  static const int kMsgRequestFieldNumber = 1;
  private:
  const ::com::genomics::protobuf::MessageRequest& _internal_msgrequest() const;
  public:
  const ::com::genomics::protobuf::MessageRequest& msgrequest() const;
  ::com::genomics::protobuf::MessageRequest* release_msgrequest();
  ::com::genomics::protobuf::MessageRequest* mutable_msgrequest();
  void set_allocated_msgrequest(::com::genomics::protobuf::MessageRequest* msgrequest);

  // .com.genomics.protobuf.MessageResponse msgResponse = 2;
  bool has_msgresponse() const;
  void clear_msgresponse();
  static const int kMsgResponseFieldNumber = 2;
  private:
  const ::com::genomics::protobuf::MessageResponse& _internal_msgresponse() const;
  public:
  const ::com::genomics::protobuf::MessageResponse& msgresponse() const;
  ::com::genomics::protobuf::MessageResponse* release_msgresponse();
  ::com::genomics::protobuf::MessageResponse* mutable_msgresponse();
  void set_allocated_msgresponse(::com::genomics::protobuf::MessageResponse* msgresponse);

  // .com.genomics.protobuf.MessagePush msgPush = 3;
  bool has_msgpush() const;
  void clear_msgpush();
  static const int kMsgPushFieldNumber = 3;
  private:
  const ::com::genomics::protobuf::MessagePush& _internal_msgpush() const;
  public:
  const ::com::genomics::protobuf::MessagePush& msgpush() const;
  ::com::genomics::protobuf::MessagePush* release_msgpush();
  ::com::genomics::protobuf::MessagePush* mutable_msgpush();
  void set_allocated_msgpush(::com::genomics::protobuf::MessagePush* msgpush);

  // .com.genomics.protobuf.MessagePull msgPull = 4;
  bool has_msgpull() const;
  void clear_msgpull();
  static const int kMsgPullFieldNumber = 4;
  private:
  const ::com::genomics::protobuf::MessagePull& _internal_msgpull() const;
  public:
  const ::com::genomics::protobuf::MessagePull& msgpull() const;
  ::com::genomics::protobuf::MessagePull* release_msgpull();
  ::com::genomics::protobuf::MessagePull* mutable_msgpull();
  void set_allocated_msgpull(::com::genomics::protobuf::MessagePull* msgpull);

  // .com.genomics.protobuf.MessageCommand msgCommand = 5;
  bool has_msgcommand() const;
  void clear_msgcommand();
  static const int kMsgCommandFieldNumber = 5;
  private:
  const ::com::genomics::protobuf::MessageCommand& _internal_msgcommand() const;
  public:
  const ::com::genomics::protobuf::MessageCommand& msgcommand() const;
  ::com::genomics::protobuf::MessageCommand* release_msgcommand();
  ::com::genomics::protobuf::MessageCommand* mutable_msgcommand();
  void set_allocated_msgcommand(::com::genomics::protobuf::MessageCommand* msgcommand);

  // @@protoc_insertion_point(class_scope:com.genomics.protobuf.MessageBody)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::genomics::protobuf::MessageRequest* msgrequest_;
  ::com::genomics::protobuf::MessageResponse* msgresponse_;
  ::com::genomics::protobuf::MessagePush* msgpush_;
  ::com::genomics::protobuf::MessagePull* msgpull_;
  ::com::genomics::protobuf::MessageCommand* msgcommand_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_MessageInfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MessageInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.genomics.protobuf.MessageInfo) */ {
 public:
  MessageInfo();
  virtual ~MessageInfo();

  MessageInfo(const MessageInfo& from);

  inline MessageInfo& operator=(const MessageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessageInfo(MessageInfo&& from) noexcept
    : MessageInfo() {
    *this = ::std::move(from);
  }

  inline MessageInfo& operator=(MessageInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageInfo* internal_default_instance() {
    return reinterpret_cast<const MessageInfo*>(
               &_MessageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(MessageInfo* other);
  friend void swap(MessageInfo& a, MessageInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageInfo* New() const final {
    return CreateMaybeMessage<MessageInfo>(NULL);
  }

  MessageInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MessageInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MessageInfo& from);
  void MergeFrom(const MessageInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.genomics.protobuf.MessageHeader msgHeader = 1;
  bool has_msgheader() const;
  void clear_msgheader();
  static const int kMsgHeaderFieldNumber = 1;
  private:
  const ::com::genomics::protobuf::MessageHeader& _internal_msgheader() const;
  public:
  const ::com::genomics::protobuf::MessageHeader& msgheader() const;
  ::com::genomics::protobuf::MessageHeader* release_msgheader();
  ::com::genomics::protobuf::MessageHeader* mutable_msgheader();
  void set_allocated_msgheader(::com::genomics::protobuf::MessageHeader* msgheader);

  // .com.genomics.protobuf.MessageBody msgBody = 2;
  bool has_msgbody() const;
  void clear_msgbody();
  static const int kMsgBodyFieldNumber = 2;
  private:
  const ::com::genomics::protobuf::MessageBody& _internal_msgbody() const;
  public:
  const ::com::genomics::protobuf::MessageBody& msgbody() const;
  ::com::genomics::protobuf::MessageBody* release_msgbody();
  ::com::genomics::protobuf::MessageBody* mutable_msgbody();
  void set_allocated_msgbody(::com::genomics::protobuf::MessageBody* msgbody);

  // @@protoc_insertion_point(class_scope:com.genomics.protobuf.MessageInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::genomics::protobuf::MessageHeader* msgheader_;
  ::com::genomics::protobuf::MessageBody* msgbody_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_MessageInfo_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageRequest

// uint32 requestID = 1;
inline void MessageRequest::clear_requestid() {
  requestid_ = 0u;
}
inline ::google::protobuf::uint32 MessageRequest::requestid() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageRequest.requestID)
  return requestid_;
}
inline void MessageRequest::set_requestid(::google::protobuf::uint32 value) {
  
  requestid_ = value;
  // @@protoc_insertion_point(field_set:com.genomics.protobuf.MessageRequest.requestID)
}

// .com.genomics.protobuf.RequestType requestType = 2;
inline void MessageRequest::clear_requesttype() {
  requesttype_ = 0;
}
inline ::com::genomics::protobuf::RequestType MessageRequest::requesttype() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageRequest.requestType)
  return static_cast< ::com::genomics::protobuf::RequestType >(requesttype_);
}
inline void MessageRequest::set_requesttype(::com::genomics::protobuf::RequestType value) {
  
  requesttype_ = value;
  // @@protoc_insertion_point(field_set:com.genomics.protobuf.MessageRequest.requestType)
}

// string description = 3;
inline void MessageRequest::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageRequest::description() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageRequest.description)
  return description_.GetNoArena();
}
inline void MessageRequest::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.genomics.protobuf.MessageRequest.description)
}
#if LANG_CXX11
inline void MessageRequest::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.genomics.protobuf.MessageRequest.description)
}
#endif
inline void MessageRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.genomics.protobuf.MessageRequest.description)
}
inline void MessageRequest::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.genomics.protobuf.MessageRequest.description)
}
inline ::std::string* MessageRequest::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:com.genomics.protobuf.MessageRequest.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageRequest::release_description() {
  // @@protoc_insertion_point(field_release:com.genomics.protobuf.MessageRequest.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageRequest::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:com.genomics.protobuf.MessageRequest.description)
}

// -------------------------------------------------------------------

// MessageResponse

// uint32 responseID = 1;
inline void MessageResponse::clear_responseid() {
  responseid_ = 0u;
}
inline ::google::protobuf::uint32 MessageResponse::responseid() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageResponse.responseID)
  return responseid_;
}
inline void MessageResponse::set_responseid(::google::protobuf::uint32 value) {
  
  responseid_ = value;
  // @@protoc_insertion_point(field_set:com.genomics.protobuf.MessageResponse.responseID)
}

// .com.genomics.protobuf.ResponseType responseType = 2;
inline void MessageResponse::clear_responsetype() {
  responsetype_ = 0;
}
inline ::com::genomics::protobuf::ResponseType MessageResponse::responsetype() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageResponse.responseType)
  return static_cast< ::com::genomics::protobuf::ResponseType >(responsetype_);
}
inline void MessageResponse::set_responsetype(::com::genomics::protobuf::ResponseType value) {
  
  responsetype_ = value;
  // @@protoc_insertion_point(field_set:com.genomics.protobuf.MessageResponse.responseType)
}

// string description = 3;
inline void MessageResponse::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageResponse::description() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageResponse.description)
  return description_.GetNoArena();
}
inline void MessageResponse::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.genomics.protobuf.MessageResponse.description)
}
#if LANG_CXX11
inline void MessageResponse::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.genomics.protobuf.MessageResponse.description)
}
#endif
inline void MessageResponse::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.genomics.protobuf.MessageResponse.description)
}
inline void MessageResponse::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.genomics.protobuf.MessageResponse.description)
}
inline ::std::string* MessageResponse::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:com.genomics.protobuf.MessageResponse.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageResponse::release_description() {
  // @@protoc_insertion_point(field_release:com.genomics.protobuf.MessageResponse.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageResponse::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:com.genomics.protobuf.MessageResponse.description)
}

// -------------------------------------------------------------------

// MessagePush

// -------------------------------------------------------------------

// MessagePull

// -------------------------------------------------------------------

// MessageCommand

// string cmd = 1;
inline void MessageCommand::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageCommand::cmd() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageCommand.cmd)
  return cmd_.GetNoArena();
}
inline void MessageCommand::set_cmd(const ::std::string& value) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.genomics.protobuf.MessageCommand.cmd)
}
#if LANG_CXX11
inline void MessageCommand::set_cmd(::std::string&& value) {
  
  cmd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.genomics.protobuf.MessageCommand.cmd)
}
#endif
inline void MessageCommand::set_cmd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.genomics.protobuf.MessageCommand.cmd)
}
inline void MessageCommand::set_cmd(const char* value, size_t size) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.genomics.protobuf.MessageCommand.cmd)
}
inline ::std::string* MessageCommand::mutable_cmd() {
  
  // @@protoc_insertion_point(field_mutable:com.genomics.protobuf.MessageCommand.cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageCommand::release_cmd() {
  // @@protoc_insertion_point(field_release:com.genomics.protobuf.MessageCommand.cmd)
  
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageCommand::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    
  } else {
    
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:com.genomics.protobuf.MessageCommand.cmd)
}

// string xmlFilename = 2;
inline void MessageCommand::clear_xmlfilename() {
  xmlfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageCommand::xmlfilename() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageCommand.xmlFilename)
  return xmlfilename_.GetNoArena();
}
inline void MessageCommand::set_xmlfilename(const ::std::string& value) {
  
  xmlfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.genomics.protobuf.MessageCommand.xmlFilename)
}
#if LANG_CXX11
inline void MessageCommand::set_xmlfilename(::std::string&& value) {
  
  xmlfilename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.genomics.protobuf.MessageCommand.xmlFilename)
}
#endif
inline void MessageCommand::set_xmlfilename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  xmlfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.genomics.protobuf.MessageCommand.xmlFilename)
}
inline void MessageCommand::set_xmlfilename(const char* value, size_t size) {
  
  xmlfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.genomics.protobuf.MessageCommand.xmlFilename)
}
inline ::std::string* MessageCommand::mutable_xmlfilename() {
  
  // @@protoc_insertion_point(field_mutable:com.genomics.protobuf.MessageCommand.xmlFilename)
  return xmlfilename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageCommand::release_xmlfilename() {
  // @@protoc_insertion_point(field_release:com.genomics.protobuf.MessageCommand.xmlFilename)
  
  return xmlfilename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageCommand::set_allocated_xmlfilename(::std::string* xmlfilename) {
  if (xmlfilename != NULL) {
    
  } else {
    
  }
  xmlfilename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xmlfilename);
  // @@protoc_insertion_point(field_set_allocated:com.genomics.protobuf.MessageCommand.xmlFilename)
}

// string xslFilename = 3;
inline void MessageCommand::clear_xslfilename() {
  xslfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageCommand::xslfilename() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageCommand.xslFilename)
  return xslfilename_.GetNoArena();
}
inline void MessageCommand::set_xslfilename(const ::std::string& value) {
  
  xslfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.genomics.protobuf.MessageCommand.xslFilename)
}
#if LANG_CXX11
inline void MessageCommand::set_xslfilename(::std::string&& value) {
  
  xslfilename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.genomics.protobuf.MessageCommand.xslFilename)
}
#endif
inline void MessageCommand::set_xslfilename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  xslfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.genomics.protobuf.MessageCommand.xslFilename)
}
inline void MessageCommand::set_xslfilename(const char* value, size_t size) {
  
  xslfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.genomics.protobuf.MessageCommand.xslFilename)
}
inline ::std::string* MessageCommand::mutable_xslfilename() {
  
  // @@protoc_insertion_point(field_mutable:com.genomics.protobuf.MessageCommand.xslFilename)
  return xslfilename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageCommand::release_xslfilename() {
  // @@protoc_insertion_point(field_release:com.genomics.protobuf.MessageCommand.xslFilename)
  
  return xslfilename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageCommand::set_allocated_xslfilename(::std::string* xslfilename) {
  if (xslfilename != NULL) {
    
  } else {
    
  }
  xslfilename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xslfilename);
  // @@protoc_insertion_point(field_set_allocated:com.genomics.protobuf.MessageCommand.xslFilename)
}

// string outFilename = 4;
inline void MessageCommand::clear_outfilename() {
  outfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageCommand::outfilename() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageCommand.outFilename)
  return outfilename_.GetNoArena();
}
inline void MessageCommand::set_outfilename(const ::std::string& value) {
  
  outfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.genomics.protobuf.MessageCommand.outFilename)
}
#if LANG_CXX11
inline void MessageCommand::set_outfilename(::std::string&& value) {
  
  outfilename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.genomics.protobuf.MessageCommand.outFilename)
}
#endif
inline void MessageCommand::set_outfilename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  outfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.genomics.protobuf.MessageCommand.outFilename)
}
inline void MessageCommand::set_outfilename(const char* value, size_t size) {
  
  outfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.genomics.protobuf.MessageCommand.outFilename)
}
inline ::std::string* MessageCommand::mutable_outfilename() {
  
  // @@protoc_insertion_point(field_mutable:com.genomics.protobuf.MessageCommand.outFilename)
  return outfilename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageCommand::release_outfilename() {
  // @@protoc_insertion_point(field_release:com.genomics.protobuf.MessageCommand.outFilename)
  
  return outfilename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageCommand::set_allocated_outfilename(::std::string* outfilename) {
  if (outfilename != NULL) {
    
  } else {
    
  }
  outfilename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), outfilename);
  // @@protoc_insertion_point(field_set_allocated:com.genomics.protobuf.MessageCommand.outFilename)
}

// -------------------------------------------------------------------

// MessageHeader

// uint32 version = 1;
inline void MessageHeader::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 MessageHeader::version() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageHeader.version)
  return version_;
}
inline void MessageHeader::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:com.genomics.protobuf.MessageHeader.version)
}

// uint32 msgID = 2;
inline void MessageHeader::clear_msgid() {
  msgid_ = 0u;
}
inline ::google::protobuf::uint32 MessageHeader::msgid() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageHeader.msgID)
  return msgid_;
}
inline void MessageHeader::set_msgid(::google::protobuf::uint32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:com.genomics.protobuf.MessageHeader.msgID)
}

// .com.genomics.protobuf.MsgType msgType = 3;
inline void MessageHeader::clear_msgtype() {
  msgtype_ = 0;
}
inline ::com::genomics::protobuf::MsgType MessageHeader::msgtype() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageHeader.msgType)
  return static_cast< ::com::genomics::protobuf::MsgType >(msgtype_);
}
inline void MessageHeader::set_msgtype(::com::genomics::protobuf::MsgType value) {
  
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:com.genomics.protobuf.MessageHeader.msgType)
}

// -------------------------------------------------------------------

// MessageBody

// .com.genomics.protobuf.MessageRequest msgRequest = 1;
inline bool MessageBody::has_msgrequest() const {
  return this != internal_default_instance() && msgrequest_ != NULL;
}
inline void MessageBody::clear_msgrequest() {
  if (GetArenaNoVirtual() == NULL && msgrequest_ != NULL) {
    delete msgrequest_;
  }
  msgrequest_ = NULL;
}
inline const ::com::genomics::protobuf::MessageRequest& MessageBody::_internal_msgrequest() const {
  return *msgrequest_;
}
inline const ::com::genomics::protobuf::MessageRequest& MessageBody::msgrequest() const {
  const ::com::genomics::protobuf::MessageRequest* p = msgrequest_;
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageBody.msgRequest)
  return p != NULL ? *p : *reinterpret_cast<const ::com::genomics::protobuf::MessageRequest*>(
      &::com::genomics::protobuf::_MessageRequest_default_instance_);
}
inline ::com::genomics::protobuf::MessageRequest* MessageBody::release_msgrequest() {
  // @@protoc_insertion_point(field_release:com.genomics.protobuf.MessageBody.msgRequest)
  
  ::com::genomics::protobuf::MessageRequest* temp = msgrequest_;
  msgrequest_ = NULL;
  return temp;
}
inline ::com::genomics::protobuf::MessageRequest* MessageBody::mutable_msgrequest() {
  
  if (msgrequest_ == NULL) {
    auto* p = CreateMaybeMessage<::com::genomics::protobuf::MessageRequest>(GetArenaNoVirtual());
    msgrequest_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.genomics.protobuf.MessageBody.msgRequest)
  return msgrequest_;
}
inline void MessageBody::set_allocated_msgrequest(::com::genomics::protobuf::MessageRequest* msgrequest) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete msgrequest_;
  }
  if (msgrequest) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      msgrequest = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, msgrequest, submessage_arena);
    }
    
  } else {
    
  }
  msgrequest_ = msgrequest;
  // @@protoc_insertion_point(field_set_allocated:com.genomics.protobuf.MessageBody.msgRequest)
}

// .com.genomics.protobuf.MessageResponse msgResponse = 2;
inline bool MessageBody::has_msgresponse() const {
  return this != internal_default_instance() && msgresponse_ != NULL;
}
inline void MessageBody::clear_msgresponse() {
  if (GetArenaNoVirtual() == NULL && msgresponse_ != NULL) {
    delete msgresponse_;
  }
  msgresponse_ = NULL;
}
inline const ::com::genomics::protobuf::MessageResponse& MessageBody::_internal_msgresponse() const {
  return *msgresponse_;
}
inline const ::com::genomics::protobuf::MessageResponse& MessageBody::msgresponse() const {
  const ::com::genomics::protobuf::MessageResponse* p = msgresponse_;
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageBody.msgResponse)
  return p != NULL ? *p : *reinterpret_cast<const ::com::genomics::protobuf::MessageResponse*>(
      &::com::genomics::protobuf::_MessageResponse_default_instance_);
}
inline ::com::genomics::protobuf::MessageResponse* MessageBody::release_msgresponse() {
  // @@protoc_insertion_point(field_release:com.genomics.protobuf.MessageBody.msgResponse)
  
  ::com::genomics::protobuf::MessageResponse* temp = msgresponse_;
  msgresponse_ = NULL;
  return temp;
}
inline ::com::genomics::protobuf::MessageResponse* MessageBody::mutable_msgresponse() {
  
  if (msgresponse_ == NULL) {
    auto* p = CreateMaybeMessage<::com::genomics::protobuf::MessageResponse>(GetArenaNoVirtual());
    msgresponse_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.genomics.protobuf.MessageBody.msgResponse)
  return msgresponse_;
}
inline void MessageBody::set_allocated_msgresponse(::com::genomics::protobuf::MessageResponse* msgresponse) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete msgresponse_;
  }
  if (msgresponse) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      msgresponse = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, msgresponse, submessage_arena);
    }
    
  } else {
    
  }
  msgresponse_ = msgresponse;
  // @@protoc_insertion_point(field_set_allocated:com.genomics.protobuf.MessageBody.msgResponse)
}

// .com.genomics.protobuf.MessagePush msgPush = 3;
inline bool MessageBody::has_msgpush() const {
  return this != internal_default_instance() && msgpush_ != NULL;
}
inline void MessageBody::clear_msgpush() {
  if (GetArenaNoVirtual() == NULL && msgpush_ != NULL) {
    delete msgpush_;
  }
  msgpush_ = NULL;
}
inline const ::com::genomics::protobuf::MessagePush& MessageBody::_internal_msgpush() const {
  return *msgpush_;
}
inline const ::com::genomics::protobuf::MessagePush& MessageBody::msgpush() const {
  const ::com::genomics::protobuf::MessagePush* p = msgpush_;
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageBody.msgPush)
  return p != NULL ? *p : *reinterpret_cast<const ::com::genomics::protobuf::MessagePush*>(
      &::com::genomics::protobuf::_MessagePush_default_instance_);
}
inline ::com::genomics::protobuf::MessagePush* MessageBody::release_msgpush() {
  // @@protoc_insertion_point(field_release:com.genomics.protobuf.MessageBody.msgPush)
  
  ::com::genomics::protobuf::MessagePush* temp = msgpush_;
  msgpush_ = NULL;
  return temp;
}
inline ::com::genomics::protobuf::MessagePush* MessageBody::mutable_msgpush() {
  
  if (msgpush_ == NULL) {
    auto* p = CreateMaybeMessage<::com::genomics::protobuf::MessagePush>(GetArenaNoVirtual());
    msgpush_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.genomics.protobuf.MessageBody.msgPush)
  return msgpush_;
}
inline void MessageBody::set_allocated_msgpush(::com::genomics::protobuf::MessagePush* msgpush) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete msgpush_;
  }
  if (msgpush) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      msgpush = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, msgpush, submessage_arena);
    }
    
  } else {
    
  }
  msgpush_ = msgpush;
  // @@protoc_insertion_point(field_set_allocated:com.genomics.protobuf.MessageBody.msgPush)
}

// .com.genomics.protobuf.MessagePull msgPull = 4;
inline bool MessageBody::has_msgpull() const {
  return this != internal_default_instance() && msgpull_ != NULL;
}
inline void MessageBody::clear_msgpull() {
  if (GetArenaNoVirtual() == NULL && msgpull_ != NULL) {
    delete msgpull_;
  }
  msgpull_ = NULL;
}
inline const ::com::genomics::protobuf::MessagePull& MessageBody::_internal_msgpull() const {
  return *msgpull_;
}
inline const ::com::genomics::protobuf::MessagePull& MessageBody::msgpull() const {
  const ::com::genomics::protobuf::MessagePull* p = msgpull_;
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageBody.msgPull)
  return p != NULL ? *p : *reinterpret_cast<const ::com::genomics::protobuf::MessagePull*>(
      &::com::genomics::protobuf::_MessagePull_default_instance_);
}
inline ::com::genomics::protobuf::MessagePull* MessageBody::release_msgpull() {
  // @@protoc_insertion_point(field_release:com.genomics.protobuf.MessageBody.msgPull)
  
  ::com::genomics::protobuf::MessagePull* temp = msgpull_;
  msgpull_ = NULL;
  return temp;
}
inline ::com::genomics::protobuf::MessagePull* MessageBody::mutable_msgpull() {
  
  if (msgpull_ == NULL) {
    auto* p = CreateMaybeMessage<::com::genomics::protobuf::MessagePull>(GetArenaNoVirtual());
    msgpull_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.genomics.protobuf.MessageBody.msgPull)
  return msgpull_;
}
inline void MessageBody::set_allocated_msgpull(::com::genomics::protobuf::MessagePull* msgpull) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete msgpull_;
  }
  if (msgpull) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      msgpull = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, msgpull, submessage_arena);
    }
    
  } else {
    
  }
  msgpull_ = msgpull;
  // @@protoc_insertion_point(field_set_allocated:com.genomics.protobuf.MessageBody.msgPull)
}

// .com.genomics.protobuf.MessageCommand msgCommand = 5;
inline bool MessageBody::has_msgcommand() const {
  return this != internal_default_instance() && msgcommand_ != NULL;
}
inline void MessageBody::clear_msgcommand() {
  if (GetArenaNoVirtual() == NULL && msgcommand_ != NULL) {
    delete msgcommand_;
  }
  msgcommand_ = NULL;
}
inline const ::com::genomics::protobuf::MessageCommand& MessageBody::_internal_msgcommand() const {
  return *msgcommand_;
}
inline const ::com::genomics::protobuf::MessageCommand& MessageBody::msgcommand() const {
  const ::com::genomics::protobuf::MessageCommand* p = msgcommand_;
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageBody.msgCommand)
  return p != NULL ? *p : *reinterpret_cast<const ::com::genomics::protobuf::MessageCommand*>(
      &::com::genomics::protobuf::_MessageCommand_default_instance_);
}
inline ::com::genomics::protobuf::MessageCommand* MessageBody::release_msgcommand() {
  // @@protoc_insertion_point(field_release:com.genomics.protobuf.MessageBody.msgCommand)
  
  ::com::genomics::protobuf::MessageCommand* temp = msgcommand_;
  msgcommand_ = NULL;
  return temp;
}
inline ::com::genomics::protobuf::MessageCommand* MessageBody::mutable_msgcommand() {
  
  if (msgcommand_ == NULL) {
    auto* p = CreateMaybeMessage<::com::genomics::protobuf::MessageCommand>(GetArenaNoVirtual());
    msgcommand_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.genomics.protobuf.MessageBody.msgCommand)
  return msgcommand_;
}
inline void MessageBody::set_allocated_msgcommand(::com::genomics::protobuf::MessageCommand* msgcommand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete msgcommand_;
  }
  if (msgcommand) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      msgcommand = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, msgcommand, submessage_arena);
    }
    
  } else {
    
  }
  msgcommand_ = msgcommand;
  // @@protoc_insertion_point(field_set_allocated:com.genomics.protobuf.MessageBody.msgCommand)
}

// -------------------------------------------------------------------

// MessageInfo

// .com.genomics.protobuf.MessageHeader msgHeader = 1;
inline bool MessageInfo::has_msgheader() const {
  return this != internal_default_instance() && msgheader_ != NULL;
}
inline void MessageInfo::clear_msgheader() {
  if (GetArenaNoVirtual() == NULL && msgheader_ != NULL) {
    delete msgheader_;
  }
  msgheader_ = NULL;
}
inline const ::com::genomics::protobuf::MessageHeader& MessageInfo::_internal_msgheader() const {
  return *msgheader_;
}
inline const ::com::genomics::protobuf::MessageHeader& MessageInfo::msgheader() const {
  const ::com::genomics::protobuf::MessageHeader* p = msgheader_;
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageInfo.msgHeader)
  return p != NULL ? *p : *reinterpret_cast<const ::com::genomics::protobuf::MessageHeader*>(
      &::com::genomics::protobuf::_MessageHeader_default_instance_);
}
inline ::com::genomics::protobuf::MessageHeader* MessageInfo::release_msgheader() {
  // @@protoc_insertion_point(field_release:com.genomics.protobuf.MessageInfo.msgHeader)
  
  ::com::genomics::protobuf::MessageHeader* temp = msgheader_;
  msgheader_ = NULL;
  return temp;
}
inline ::com::genomics::protobuf::MessageHeader* MessageInfo::mutable_msgheader() {
  
  if (msgheader_ == NULL) {
    auto* p = CreateMaybeMessage<::com::genomics::protobuf::MessageHeader>(GetArenaNoVirtual());
    msgheader_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.genomics.protobuf.MessageInfo.msgHeader)
  return msgheader_;
}
inline void MessageInfo::set_allocated_msgheader(::com::genomics::protobuf::MessageHeader* msgheader) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete msgheader_;
  }
  if (msgheader) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      msgheader = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, msgheader, submessage_arena);
    }
    
  } else {
    
  }
  msgheader_ = msgheader;
  // @@protoc_insertion_point(field_set_allocated:com.genomics.protobuf.MessageInfo.msgHeader)
}

// .com.genomics.protobuf.MessageBody msgBody = 2;
inline bool MessageInfo::has_msgbody() const {
  return this != internal_default_instance() && msgbody_ != NULL;
}
inline void MessageInfo::clear_msgbody() {
  if (GetArenaNoVirtual() == NULL && msgbody_ != NULL) {
    delete msgbody_;
  }
  msgbody_ = NULL;
}
inline const ::com::genomics::protobuf::MessageBody& MessageInfo::_internal_msgbody() const {
  return *msgbody_;
}
inline const ::com::genomics::protobuf::MessageBody& MessageInfo::msgbody() const {
  const ::com::genomics::protobuf::MessageBody* p = msgbody_;
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageInfo.msgBody)
  return p != NULL ? *p : *reinterpret_cast<const ::com::genomics::protobuf::MessageBody*>(
      &::com::genomics::protobuf::_MessageBody_default_instance_);
}
inline ::com::genomics::protobuf::MessageBody* MessageInfo::release_msgbody() {
  // @@protoc_insertion_point(field_release:com.genomics.protobuf.MessageInfo.msgBody)
  
  ::com::genomics::protobuf::MessageBody* temp = msgbody_;
  msgbody_ = NULL;
  return temp;
}
inline ::com::genomics::protobuf::MessageBody* MessageInfo::mutable_msgbody() {
  
  if (msgbody_ == NULL) {
    auto* p = CreateMaybeMessage<::com::genomics::protobuf::MessageBody>(GetArenaNoVirtual());
    msgbody_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.genomics.protobuf.MessageInfo.msgBody)
  return msgbody_;
}
inline void MessageInfo::set_allocated_msgbody(::com::genomics::protobuf::MessageBody* msgbody) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete msgbody_;
  }
  if (msgbody) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      msgbody = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, msgbody, submessage_arena);
    }
    
  } else {
    
  }
  msgbody_ = msgbody;
  // @@protoc_insertion_point(field_set_allocated:com.genomics.protobuf.MessageInfo.msgBody)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace genomics
}  // namespace com

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::genomics::protobuf::MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::genomics::protobuf::MsgType>() {
  return ::com::genomics::protobuf::MsgType_descriptor();
}
template <> struct is_proto_enum< ::com::genomics::protobuf::RequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::genomics::protobuf::RequestType>() {
  return ::com::genomics::protobuf::RequestType_descriptor();
}
template <> struct is_proto_enum< ::com::genomics::protobuf::ResponseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::genomics::protobuf::ResponseType>() {
  return ::com::genomics::protobuf::ResponseType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_MessageInfo_2eproto
