// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MessageInfo_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_MessageInfo_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_MessageInfo_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MessageInfo_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_MessageInfo_2eproto;
namespace com {
namespace genomics {
namespace protobuf {
class MessageBody;
struct MessageBodyDefaultTypeInternal;
extern MessageBodyDefaultTypeInternal _MessageBody_default_instance_;
class MessageCommand;
struct MessageCommandDefaultTypeInternal;
extern MessageCommandDefaultTypeInternal _MessageCommand_default_instance_;
class MessageHeader;
struct MessageHeaderDefaultTypeInternal;
extern MessageHeaderDefaultTypeInternal _MessageHeader_default_instance_;
class MessageInfo;
struct MessageInfoDefaultTypeInternal;
extern MessageInfoDefaultTypeInternal _MessageInfo_default_instance_;
class MessagePull;
struct MessagePullDefaultTypeInternal;
extern MessagePullDefaultTypeInternal _MessagePull_default_instance_;
class MessagePush;
struct MessagePushDefaultTypeInternal;
extern MessagePushDefaultTypeInternal _MessagePush_default_instance_;
class MessageRequest;
struct MessageRequestDefaultTypeInternal;
extern MessageRequestDefaultTypeInternal _MessageRequest_default_instance_;
class MessageResponse;
struct MessageResponseDefaultTypeInternal;
extern MessageResponseDefaultTypeInternal _MessageResponse_default_instance_;
}  // namespace protobuf
}  // namespace genomics
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template <>
::com::genomics::protobuf::MessageBody* Arena::CreateMaybeMessage<::com::genomics::protobuf::MessageBody>(Arena*);
template <>
::com::genomics::protobuf::MessageCommand* Arena::CreateMaybeMessage<::com::genomics::protobuf::MessageCommand>(Arena*);
template <>
::com::genomics::protobuf::MessageHeader* Arena::CreateMaybeMessage<::com::genomics::protobuf::MessageHeader>(Arena*);
template <>
::com::genomics::protobuf::MessageInfo* Arena::CreateMaybeMessage<::com::genomics::protobuf::MessageInfo>(Arena*);
template <>
::com::genomics::protobuf::MessagePull* Arena::CreateMaybeMessage<::com::genomics::protobuf::MessagePull>(Arena*);
template <>
::com::genomics::protobuf::MessagePush* Arena::CreateMaybeMessage<::com::genomics::protobuf::MessagePush>(Arena*);
template <>
::com::genomics::protobuf::MessageRequest* Arena::CreateMaybeMessage<::com::genomics::protobuf::MessageRequest>(Arena*);
template <>
::com::genomics::protobuf::MessageResponse* Arena::CreateMaybeMessage<::com::genomics::protobuf::MessageResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace com {
namespace genomics {
namespace protobuf {
enum MsgType : int {
  MsgTypeUnknow = 0,
  MsgTypeRequest = 100,
  MsgTypeResponse = 101,
  MsgTypePush = 102,
  MsgTypePull = 103,
  MsgTypeCommand = 104,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MsgType_IsValid(int value);
constexpr MsgType MsgType_MIN = static_cast<MsgType>(0);
constexpr MsgType MsgType_MAX = static_cast<MsgType>(104);
constexpr int MsgType_ARRAYSIZE = 104 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
MsgType_descriptor();
template <typename T>
const std::string& MsgType_Name(T value) {
  static_assert(std::is_same<T, MsgType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MsgType_Name().");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(MsgType_descriptor(), value);
}
inline bool MsgType_Parse(absl::string_view name, MsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgType>(
      MsgType_descriptor(), name, value);
}
enum RequestType : int {
  ReqTypeUnknow = 0,
  ReqTypePdfFile = 200,
  ReqTypePdfPage = 201,
  RequestType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RequestType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RequestType_IsValid(int value);
constexpr RequestType RequestType_MIN = static_cast<RequestType>(0);
constexpr RequestType RequestType_MAX = static_cast<RequestType>(201);
constexpr int RequestType_ARRAYSIZE = 201 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
RequestType_descriptor();
template <typename T>
const std::string& RequestType_Name(T value) {
  static_assert(std::is_same<T, RequestType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RequestType_Name().");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(RequestType_descriptor(), value);
}
inline bool RequestType_Parse(absl::string_view name, RequestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RequestType>(
      RequestType_descriptor(), name, value);
}
enum ResponseType : int {
  ResTypeSaveSuccess = 0,
  ResTypeFileNotFound = 1,
  ResponseType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ResponseType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ResponseType_IsValid(int value);
constexpr ResponseType ResponseType_MIN = static_cast<ResponseType>(0);
constexpr ResponseType ResponseType_MAX = static_cast<ResponseType>(1);
constexpr int ResponseType_ARRAYSIZE = 1 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ResponseType_descriptor();
template <typename T>
const std::string& ResponseType_Name(T value) {
  static_assert(std::is_same<T, ResponseType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ResponseType_Name().");
  return ResponseType_Name(static_cast<ResponseType>(value));
}
template <>
inline const std::string& ResponseType_Name(ResponseType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ResponseType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool ResponseType_Parse(absl::string_view name, ResponseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResponseType>(
      ResponseType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class MessageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.genomics.protobuf.MessageRequest) */ {
 public:
  inline MessageRequest() : MessageRequest(nullptr) {}
  ~MessageRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MessageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageRequest(const MessageRequest& from);
  MessageRequest(MessageRequest&& from) noexcept
    : MessageRequest() {
    *this = ::std::move(from);
  }

  inline MessageRequest& operator=(const MessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageRequest& operator=(MessageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageRequest* internal_default_instance() {
    return reinterpret_cast<const MessageRequest*>(
               &_MessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MessageRequest& a, MessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MessageRequest& from) {
    MessageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.genomics.protobuf.MessageRequest";
  }
  protected:
  explicit MessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 3,
    kRequestIDFieldNumber = 1,
    kRequestTypeFieldNumber = 2,
  };
  // string description = 3;
  void clear_description() ;
  const std::string& description() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // uint32 requestID = 1;
  void clear_requestid() ;
  ::uint32_t requestid() const;
  void set_requestid(::uint32_t value);

  private:
  ::uint32_t _internal_requestid() const;
  void _internal_set_requestid(::uint32_t value);

  public:
  // .com.genomics.protobuf.RequestType requestType = 2;
  void clear_requesttype() ;
  ::com::genomics::protobuf::RequestType requesttype() const;
  void set_requesttype(::com::genomics::protobuf::RequestType value);

  private:
  ::com::genomics::protobuf::RequestType _internal_requesttype() const;
  void _internal_set_requesttype(::com::genomics::protobuf::RequestType value);

  public:
  // @@protoc_insertion_point(class_scope:com.genomics.protobuf.MessageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::uint32_t requestid_;
    int requesttype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MessageInfo_2eproto;
};// -------------------------------------------------------------------

class MessageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.genomics.protobuf.MessageResponse) */ {
 public:
  inline MessageResponse() : MessageResponse(nullptr) {}
  ~MessageResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MessageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageResponse(const MessageResponse& from);
  MessageResponse(MessageResponse&& from) noexcept
    : MessageResponse() {
    *this = ::std::move(from);
  }

  inline MessageResponse& operator=(const MessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageResponse& operator=(MessageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageResponse* internal_default_instance() {
    return reinterpret_cast<const MessageResponse*>(
               &_MessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MessageResponse& a, MessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MessageResponse& from) {
    MessageResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.genomics.protobuf.MessageResponse";
  }
  protected:
  explicit MessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 3,
    kResponseIDFieldNumber = 1,
    kResponseTypeFieldNumber = 2,
  };
  // string description = 3;
  void clear_description() ;
  const std::string& description() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // uint32 responseID = 1;
  void clear_responseid() ;
  ::uint32_t responseid() const;
  void set_responseid(::uint32_t value);

  private:
  ::uint32_t _internal_responseid() const;
  void _internal_set_responseid(::uint32_t value);

  public:
  // .com.genomics.protobuf.ResponseType responseType = 2;
  void clear_responsetype() ;
  ::com::genomics::protobuf::ResponseType responsetype() const;
  void set_responsetype(::com::genomics::protobuf::ResponseType value);

  private:
  ::com::genomics::protobuf::ResponseType _internal_responsetype() const;
  void _internal_set_responsetype(::com::genomics::protobuf::ResponseType value);

  public:
  // @@protoc_insertion_point(class_scope:com.genomics.protobuf.MessageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::uint32_t responseid_;
    int responsetype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MessageInfo_2eproto;
};// -------------------------------------------------------------------

class MessagePush final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:com.genomics.protobuf.MessagePush) */ {
 public:
  inline MessagePush() : MessagePush(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MessagePush(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessagePush(const MessagePush& from);
  MessagePush(MessagePush&& from) noexcept
    : MessagePush() {
    *this = ::std::move(from);
  }

  inline MessagePush& operator=(const MessagePush& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessagePush& operator=(MessagePush&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessagePush& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessagePush* internal_default_instance() {
    return reinterpret_cast<const MessagePush*>(
               &_MessagePush_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MessagePush& a, MessagePush& b) {
    a.Swap(&b);
  }
  inline void Swap(MessagePush* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessagePush* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessagePush* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessagePush>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MessagePush& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MessagePush& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.genomics.protobuf.MessagePush";
  }
  protected:
  explicit MessagePush(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.genomics.protobuf.MessagePush)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_MessageInfo_2eproto;
};// -------------------------------------------------------------------

class MessagePull final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:com.genomics.protobuf.MessagePull) */ {
 public:
  inline MessagePull() : MessagePull(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MessagePull(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessagePull(const MessagePull& from);
  MessagePull(MessagePull&& from) noexcept
    : MessagePull() {
    *this = ::std::move(from);
  }

  inline MessagePull& operator=(const MessagePull& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessagePull& operator=(MessagePull&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessagePull& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessagePull* internal_default_instance() {
    return reinterpret_cast<const MessagePull*>(
               &_MessagePull_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MessagePull& a, MessagePull& b) {
    a.Swap(&b);
  }
  inline void Swap(MessagePull* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessagePull* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessagePull* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessagePull>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MessagePull& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MessagePull& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.genomics.protobuf.MessagePull";
  }
  protected:
  explicit MessagePull(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.genomics.protobuf.MessagePull)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_MessageInfo_2eproto;
};// -------------------------------------------------------------------

class MessageCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.genomics.protobuf.MessageCommand) */ {
 public:
  inline MessageCommand() : MessageCommand(nullptr) {}
  ~MessageCommand() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MessageCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageCommand(const MessageCommand& from);
  MessageCommand(MessageCommand&& from) noexcept
    : MessageCommand() {
    *this = ::std::move(from);
  }

  inline MessageCommand& operator=(const MessageCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageCommand& operator=(MessageCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageCommand* internal_default_instance() {
    return reinterpret_cast<const MessageCommand*>(
               &_MessageCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MessageCommand& a, MessageCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageCommand* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MessageCommand& from) {
    MessageCommand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.genomics.protobuf.MessageCommand";
  }
  protected:
  explicit MessageCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdFieldNumber = 1,
    kXmlFilenameFieldNumber = 2,
    kXslFilenameFieldNumber = 3,
    kOutFilenameFieldNumber = 4,
  };
  // string cmd = 1;
  void clear_cmd() ;
  const std::string& cmd() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cmd(Arg_&& arg, Args_... args);
  std::string* mutable_cmd();
  PROTOBUF_NODISCARD std::string* release_cmd();
  void set_allocated_cmd(std::string* ptr);

  private:
  const std::string& _internal_cmd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cmd(
      const std::string& value);
  std::string* _internal_mutable_cmd();

  public:
  // string xmlFilename = 2;
  void clear_xmlfilename() ;
  const std::string& xmlfilename() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_xmlfilename(Arg_&& arg, Args_... args);
  std::string* mutable_xmlfilename();
  PROTOBUF_NODISCARD std::string* release_xmlfilename();
  void set_allocated_xmlfilename(std::string* ptr);

  private:
  const std::string& _internal_xmlfilename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xmlfilename(
      const std::string& value);
  std::string* _internal_mutable_xmlfilename();

  public:
  // string xslFilename = 3;
  void clear_xslfilename() ;
  const std::string& xslfilename() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_xslfilename(Arg_&& arg, Args_... args);
  std::string* mutable_xslfilename();
  PROTOBUF_NODISCARD std::string* release_xslfilename();
  void set_allocated_xslfilename(std::string* ptr);

  private:
  const std::string& _internal_xslfilename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xslfilename(
      const std::string& value);
  std::string* _internal_mutable_xslfilename();

  public:
  // string outFilename = 4;
  void clear_outfilename() ;
  const std::string& outfilename() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_outfilename(Arg_&& arg, Args_... args);
  std::string* mutable_outfilename();
  PROTOBUF_NODISCARD std::string* release_outfilename();
  void set_allocated_outfilename(std::string* ptr);

  private:
  const std::string& _internal_outfilename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_outfilename(
      const std::string& value);
  std::string* _internal_mutable_outfilename();

  public:
  // @@protoc_insertion_point(class_scope:com.genomics.protobuf.MessageCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xmlfilename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xslfilename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outfilename_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MessageInfo_2eproto;
};// -------------------------------------------------------------------

class MessageHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.genomics.protobuf.MessageHeader) */ {
 public:
  inline MessageHeader() : MessageHeader(nullptr) {}
  ~MessageHeader() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MessageHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageHeader(const MessageHeader& from);
  MessageHeader(MessageHeader&& from) noexcept
    : MessageHeader() {
    *this = ::std::move(from);
  }

  inline MessageHeader& operator=(const MessageHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageHeader& operator=(MessageHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageHeader* internal_default_instance() {
    return reinterpret_cast<const MessageHeader*>(
               &_MessageHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MessageHeader& a, MessageHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageHeader* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MessageHeader& from) {
    MessageHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.genomics.protobuf.MessageHeader";
  }
  protected:
  explicit MessageHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kMsgIDFieldNumber = 2,
    kMsgTypeFieldNumber = 3,
  };
  // uint32 version = 1;
  void clear_version() ;
  ::uint32_t version() const;
  void set_version(::uint32_t value);

  private:
  ::uint32_t _internal_version() const;
  void _internal_set_version(::uint32_t value);

  public:
  // uint32 msgID = 2;
  void clear_msgid() ;
  ::uint32_t msgid() const;
  void set_msgid(::uint32_t value);

  private:
  ::uint32_t _internal_msgid() const;
  void _internal_set_msgid(::uint32_t value);

  public:
  // .com.genomics.protobuf.MsgType msgType = 3;
  void clear_msgtype() ;
  ::com::genomics::protobuf::MsgType msgtype() const;
  void set_msgtype(::com::genomics::protobuf::MsgType value);

  private:
  ::com::genomics::protobuf::MsgType _internal_msgtype() const;
  void _internal_set_msgtype(::com::genomics::protobuf::MsgType value);

  public:
  // @@protoc_insertion_point(class_scope:com.genomics.protobuf.MessageHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t version_;
    ::uint32_t msgid_;
    int msgtype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MessageInfo_2eproto;
};// -------------------------------------------------------------------

class MessageBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.genomics.protobuf.MessageBody) */ {
 public:
  inline MessageBody() : MessageBody(nullptr) {}
  ~MessageBody() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MessageBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageBody(const MessageBody& from);
  MessageBody(MessageBody&& from) noexcept
    : MessageBody() {
    *this = ::std::move(from);
  }

  inline MessageBody& operator=(const MessageBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageBody& operator=(MessageBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageBody* internal_default_instance() {
    return reinterpret_cast<const MessageBody*>(
               &_MessageBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MessageBody& a, MessageBody& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageBody* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MessageBody& from) {
    MessageBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.genomics.protobuf.MessageBody";
  }
  protected:
  explicit MessageBody(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgRequestFieldNumber = 1,
    kMsgResponseFieldNumber = 2,
    kMsgPushFieldNumber = 3,
    kMsgPullFieldNumber = 4,
    kMsgCommandFieldNumber = 5,
  };
  // .com.genomics.protobuf.MessageRequest msgRequest = 1;
  bool has_msgrequest() const;
  void clear_msgrequest() ;
  const ::com::genomics::protobuf::MessageRequest& msgrequest() const;
  PROTOBUF_NODISCARD ::com::genomics::protobuf::MessageRequest* release_msgrequest();
  ::com::genomics::protobuf::MessageRequest* mutable_msgrequest();
  void set_allocated_msgrequest(::com::genomics::protobuf::MessageRequest* msgrequest);
  private:
  const ::com::genomics::protobuf::MessageRequest& _internal_msgrequest() const;
  ::com::genomics::protobuf::MessageRequest* _internal_mutable_msgrequest();
  public:
  void unsafe_arena_set_allocated_msgrequest(
      ::com::genomics::protobuf::MessageRequest* msgrequest);
  ::com::genomics::protobuf::MessageRequest* unsafe_arena_release_msgrequest();
  // .com.genomics.protobuf.MessageResponse msgResponse = 2;
  bool has_msgresponse() const;
  void clear_msgresponse() ;
  const ::com::genomics::protobuf::MessageResponse& msgresponse() const;
  PROTOBUF_NODISCARD ::com::genomics::protobuf::MessageResponse* release_msgresponse();
  ::com::genomics::protobuf::MessageResponse* mutable_msgresponse();
  void set_allocated_msgresponse(::com::genomics::protobuf::MessageResponse* msgresponse);
  private:
  const ::com::genomics::protobuf::MessageResponse& _internal_msgresponse() const;
  ::com::genomics::protobuf::MessageResponse* _internal_mutable_msgresponse();
  public:
  void unsafe_arena_set_allocated_msgresponse(
      ::com::genomics::protobuf::MessageResponse* msgresponse);
  ::com::genomics::protobuf::MessageResponse* unsafe_arena_release_msgresponse();
  // .com.genomics.protobuf.MessagePush msgPush = 3;
  bool has_msgpush() const;
  void clear_msgpush() ;
  const ::com::genomics::protobuf::MessagePush& msgpush() const;
  PROTOBUF_NODISCARD ::com::genomics::protobuf::MessagePush* release_msgpush();
  ::com::genomics::protobuf::MessagePush* mutable_msgpush();
  void set_allocated_msgpush(::com::genomics::protobuf::MessagePush* msgpush);
  private:
  const ::com::genomics::protobuf::MessagePush& _internal_msgpush() const;
  ::com::genomics::protobuf::MessagePush* _internal_mutable_msgpush();
  public:
  void unsafe_arena_set_allocated_msgpush(
      ::com::genomics::protobuf::MessagePush* msgpush);
  ::com::genomics::protobuf::MessagePush* unsafe_arena_release_msgpush();
  // .com.genomics.protobuf.MessagePull msgPull = 4;
  bool has_msgpull() const;
  void clear_msgpull() ;
  const ::com::genomics::protobuf::MessagePull& msgpull() const;
  PROTOBUF_NODISCARD ::com::genomics::protobuf::MessagePull* release_msgpull();
  ::com::genomics::protobuf::MessagePull* mutable_msgpull();
  void set_allocated_msgpull(::com::genomics::protobuf::MessagePull* msgpull);
  private:
  const ::com::genomics::protobuf::MessagePull& _internal_msgpull() const;
  ::com::genomics::protobuf::MessagePull* _internal_mutable_msgpull();
  public:
  void unsafe_arena_set_allocated_msgpull(
      ::com::genomics::protobuf::MessagePull* msgpull);
  ::com::genomics::protobuf::MessagePull* unsafe_arena_release_msgpull();
  // .com.genomics.protobuf.MessageCommand msgCommand = 5;
  bool has_msgcommand() const;
  void clear_msgcommand() ;
  const ::com::genomics::protobuf::MessageCommand& msgcommand() const;
  PROTOBUF_NODISCARD ::com::genomics::protobuf::MessageCommand* release_msgcommand();
  ::com::genomics::protobuf::MessageCommand* mutable_msgcommand();
  void set_allocated_msgcommand(::com::genomics::protobuf::MessageCommand* msgcommand);
  private:
  const ::com::genomics::protobuf::MessageCommand& _internal_msgcommand() const;
  ::com::genomics::protobuf::MessageCommand* _internal_mutable_msgcommand();
  public:
  void unsafe_arena_set_allocated_msgcommand(
      ::com::genomics::protobuf::MessageCommand* msgcommand);
  ::com::genomics::protobuf::MessageCommand* unsafe_arena_release_msgcommand();
  // @@protoc_insertion_point(class_scope:com.genomics.protobuf.MessageBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::genomics::protobuf::MessageRequest* msgrequest_;
    ::com::genomics::protobuf::MessageResponse* msgresponse_;
    ::com::genomics::protobuf::MessagePush* msgpush_;
    ::com::genomics::protobuf::MessagePull* msgpull_;
    ::com::genomics::protobuf::MessageCommand* msgcommand_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MessageInfo_2eproto;
};// -------------------------------------------------------------------

class MessageInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.genomics.protobuf.MessageInfo) */ {
 public:
  inline MessageInfo() : MessageInfo(nullptr) {}
  ~MessageInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MessageInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageInfo(const MessageInfo& from);
  MessageInfo(MessageInfo&& from) noexcept
    : MessageInfo() {
    *this = ::std::move(from);
  }

  inline MessageInfo& operator=(const MessageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageInfo& operator=(MessageInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageInfo* internal_default_instance() {
    return reinterpret_cast<const MessageInfo*>(
               &_MessageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MessageInfo& a, MessageInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MessageInfo& from) {
    MessageInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.genomics.protobuf.MessageInfo";
  }
  protected:
  explicit MessageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgHeaderFieldNumber = 1,
    kMsgBodyFieldNumber = 2,
  };
  // .com.genomics.protobuf.MessageHeader msgHeader = 1;
  bool has_msgheader() const;
  void clear_msgheader() ;
  const ::com::genomics::protobuf::MessageHeader& msgheader() const;
  PROTOBUF_NODISCARD ::com::genomics::protobuf::MessageHeader* release_msgheader();
  ::com::genomics::protobuf::MessageHeader* mutable_msgheader();
  void set_allocated_msgheader(::com::genomics::protobuf::MessageHeader* msgheader);
  private:
  const ::com::genomics::protobuf::MessageHeader& _internal_msgheader() const;
  ::com::genomics::protobuf::MessageHeader* _internal_mutable_msgheader();
  public:
  void unsafe_arena_set_allocated_msgheader(
      ::com::genomics::protobuf::MessageHeader* msgheader);
  ::com::genomics::protobuf::MessageHeader* unsafe_arena_release_msgheader();
  // .com.genomics.protobuf.MessageBody msgBody = 2;
  bool has_msgbody() const;
  void clear_msgbody() ;
  const ::com::genomics::protobuf::MessageBody& msgbody() const;
  PROTOBUF_NODISCARD ::com::genomics::protobuf::MessageBody* release_msgbody();
  ::com::genomics::protobuf::MessageBody* mutable_msgbody();
  void set_allocated_msgbody(::com::genomics::protobuf::MessageBody* msgbody);
  private:
  const ::com::genomics::protobuf::MessageBody& _internal_msgbody() const;
  ::com::genomics::protobuf::MessageBody* _internal_mutable_msgbody();
  public:
  void unsafe_arena_set_allocated_msgbody(
      ::com::genomics::protobuf::MessageBody* msgbody);
  ::com::genomics::protobuf::MessageBody* unsafe_arena_release_msgbody();
  // @@protoc_insertion_point(class_scope:com.genomics.protobuf.MessageInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::genomics::protobuf::MessageHeader* msgheader_;
    ::com::genomics::protobuf::MessageBody* msgbody_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MessageInfo_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MessageRequest

// uint32 requestID = 1;
inline void MessageRequest::clear_requestid() {
  _impl_.requestid_ = 0u;
}
inline ::uint32_t MessageRequest::requestid() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageRequest.requestID)
  return _internal_requestid();
}
inline void MessageRequest::set_requestid(::uint32_t value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:com.genomics.protobuf.MessageRequest.requestID)
}
inline ::uint32_t MessageRequest::_internal_requestid() const {
  return _impl_.requestid_;
}
inline void MessageRequest::_internal_set_requestid(::uint32_t value) {
  ;
  _impl_.requestid_ = value;
}

// .com.genomics.protobuf.RequestType requestType = 2;
inline void MessageRequest::clear_requesttype() {
  _impl_.requesttype_ = 0;
}
inline ::com::genomics::protobuf::RequestType MessageRequest::requesttype() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageRequest.requestType)
  return _internal_requesttype();
}
inline void MessageRequest::set_requesttype(::com::genomics::protobuf::RequestType value) {
   _internal_set_requesttype(value);
  // @@protoc_insertion_point(field_set:com.genomics.protobuf.MessageRequest.requestType)
}
inline ::com::genomics::protobuf::RequestType MessageRequest::_internal_requesttype() const {
  return static_cast<::com::genomics::protobuf::RequestType>(_impl_.requesttype_);
}
inline void MessageRequest::_internal_set_requesttype(::com::genomics::protobuf::RequestType value) {
  ;
  _impl_.requesttype_ = value;
}

// string description = 3;
inline void MessageRequest::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& MessageRequest::description() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageRequest.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MessageRequest::set_description(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.genomics.protobuf.MessageRequest.description)
}
inline std::string* MessageRequest::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:com.genomics.protobuf.MessageRequest.description)
  return _s;
}
inline const std::string& MessageRequest::_internal_description() const {
  return _impl_.description_.Get();
}
inline void MessageRequest::_internal_set_description(const std::string& value) {
  ;


  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* MessageRequest::_internal_mutable_description() {
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* MessageRequest::release_description() {
  // @@protoc_insertion_point(field_release:com.genomics.protobuf.MessageRequest.description)
  return _impl_.description_.Release();
}
inline void MessageRequest::set_allocated_description(std::string* value) {
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.genomics.protobuf.MessageRequest.description)
}

// -------------------------------------------------------------------

// MessageResponse

// uint32 responseID = 1;
inline void MessageResponse::clear_responseid() {
  _impl_.responseid_ = 0u;
}
inline ::uint32_t MessageResponse::responseid() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageResponse.responseID)
  return _internal_responseid();
}
inline void MessageResponse::set_responseid(::uint32_t value) {
  _internal_set_responseid(value);
  // @@protoc_insertion_point(field_set:com.genomics.protobuf.MessageResponse.responseID)
}
inline ::uint32_t MessageResponse::_internal_responseid() const {
  return _impl_.responseid_;
}
inline void MessageResponse::_internal_set_responseid(::uint32_t value) {
  ;
  _impl_.responseid_ = value;
}

// .com.genomics.protobuf.ResponseType responseType = 2;
inline void MessageResponse::clear_responsetype() {
  _impl_.responsetype_ = 0;
}
inline ::com::genomics::protobuf::ResponseType MessageResponse::responsetype() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageResponse.responseType)
  return _internal_responsetype();
}
inline void MessageResponse::set_responsetype(::com::genomics::protobuf::ResponseType value) {
   _internal_set_responsetype(value);
  // @@protoc_insertion_point(field_set:com.genomics.protobuf.MessageResponse.responseType)
}
inline ::com::genomics::protobuf::ResponseType MessageResponse::_internal_responsetype() const {
  return static_cast<::com::genomics::protobuf::ResponseType>(_impl_.responsetype_);
}
inline void MessageResponse::_internal_set_responsetype(::com::genomics::protobuf::ResponseType value) {
  ;
  _impl_.responsetype_ = value;
}

// string description = 3;
inline void MessageResponse::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& MessageResponse::description() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageResponse.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MessageResponse::set_description(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.genomics.protobuf.MessageResponse.description)
}
inline std::string* MessageResponse::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:com.genomics.protobuf.MessageResponse.description)
  return _s;
}
inline const std::string& MessageResponse::_internal_description() const {
  return _impl_.description_.Get();
}
inline void MessageResponse::_internal_set_description(const std::string& value) {
  ;


  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* MessageResponse::_internal_mutable_description() {
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* MessageResponse::release_description() {
  // @@protoc_insertion_point(field_release:com.genomics.protobuf.MessageResponse.description)
  return _impl_.description_.Release();
}
inline void MessageResponse::set_allocated_description(std::string* value) {
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.genomics.protobuf.MessageResponse.description)
}

// -------------------------------------------------------------------

// MessagePush

// -------------------------------------------------------------------

// MessagePull

// -------------------------------------------------------------------

// MessageCommand

// string cmd = 1;
inline void MessageCommand::clear_cmd() {
  _impl_.cmd_.ClearToEmpty();
}
inline const std::string& MessageCommand::cmd() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageCommand.cmd)
  return _internal_cmd();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MessageCommand::set_cmd(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.cmd_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.genomics.protobuf.MessageCommand.cmd)
}
inline std::string* MessageCommand::mutable_cmd() {
  std::string* _s = _internal_mutable_cmd();
  // @@protoc_insertion_point(field_mutable:com.genomics.protobuf.MessageCommand.cmd)
  return _s;
}
inline const std::string& MessageCommand::_internal_cmd() const {
  return _impl_.cmd_.Get();
}
inline void MessageCommand::_internal_set_cmd(const std::string& value) {
  ;


  _impl_.cmd_.Set(value, GetArenaForAllocation());
}
inline std::string* MessageCommand::_internal_mutable_cmd() {
  ;
  return _impl_.cmd_.Mutable( GetArenaForAllocation());
}
inline std::string* MessageCommand::release_cmd() {
  // @@protoc_insertion_point(field_release:com.genomics.protobuf.MessageCommand.cmd)
  return _impl_.cmd_.Release();
}
inline void MessageCommand::set_allocated_cmd(std::string* value) {
  _impl_.cmd_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cmd_.IsDefault()) {
          _impl_.cmd_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.genomics.protobuf.MessageCommand.cmd)
}

// string xmlFilename = 2;
inline void MessageCommand::clear_xmlfilename() {
  _impl_.xmlfilename_.ClearToEmpty();
}
inline const std::string& MessageCommand::xmlfilename() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageCommand.xmlFilename)
  return _internal_xmlfilename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MessageCommand::set_xmlfilename(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.xmlfilename_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.genomics.protobuf.MessageCommand.xmlFilename)
}
inline std::string* MessageCommand::mutable_xmlfilename() {
  std::string* _s = _internal_mutable_xmlfilename();
  // @@protoc_insertion_point(field_mutable:com.genomics.protobuf.MessageCommand.xmlFilename)
  return _s;
}
inline const std::string& MessageCommand::_internal_xmlfilename() const {
  return _impl_.xmlfilename_.Get();
}
inline void MessageCommand::_internal_set_xmlfilename(const std::string& value) {
  ;


  _impl_.xmlfilename_.Set(value, GetArenaForAllocation());
}
inline std::string* MessageCommand::_internal_mutable_xmlfilename() {
  ;
  return _impl_.xmlfilename_.Mutable( GetArenaForAllocation());
}
inline std::string* MessageCommand::release_xmlfilename() {
  // @@protoc_insertion_point(field_release:com.genomics.protobuf.MessageCommand.xmlFilename)
  return _impl_.xmlfilename_.Release();
}
inline void MessageCommand::set_allocated_xmlfilename(std::string* value) {
  _impl_.xmlfilename_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.xmlfilename_.IsDefault()) {
          _impl_.xmlfilename_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.genomics.protobuf.MessageCommand.xmlFilename)
}

// string xslFilename = 3;
inline void MessageCommand::clear_xslfilename() {
  _impl_.xslfilename_.ClearToEmpty();
}
inline const std::string& MessageCommand::xslfilename() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageCommand.xslFilename)
  return _internal_xslfilename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MessageCommand::set_xslfilename(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.xslfilename_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.genomics.protobuf.MessageCommand.xslFilename)
}
inline std::string* MessageCommand::mutable_xslfilename() {
  std::string* _s = _internal_mutable_xslfilename();
  // @@protoc_insertion_point(field_mutable:com.genomics.protobuf.MessageCommand.xslFilename)
  return _s;
}
inline const std::string& MessageCommand::_internal_xslfilename() const {
  return _impl_.xslfilename_.Get();
}
inline void MessageCommand::_internal_set_xslfilename(const std::string& value) {
  ;


  _impl_.xslfilename_.Set(value, GetArenaForAllocation());
}
inline std::string* MessageCommand::_internal_mutable_xslfilename() {
  ;
  return _impl_.xslfilename_.Mutable( GetArenaForAllocation());
}
inline std::string* MessageCommand::release_xslfilename() {
  // @@protoc_insertion_point(field_release:com.genomics.protobuf.MessageCommand.xslFilename)
  return _impl_.xslfilename_.Release();
}
inline void MessageCommand::set_allocated_xslfilename(std::string* value) {
  _impl_.xslfilename_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.xslfilename_.IsDefault()) {
          _impl_.xslfilename_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.genomics.protobuf.MessageCommand.xslFilename)
}

// string outFilename = 4;
inline void MessageCommand::clear_outfilename() {
  _impl_.outfilename_.ClearToEmpty();
}
inline const std::string& MessageCommand::outfilename() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageCommand.outFilename)
  return _internal_outfilename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MessageCommand::set_outfilename(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.outfilename_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.genomics.protobuf.MessageCommand.outFilename)
}
inline std::string* MessageCommand::mutable_outfilename() {
  std::string* _s = _internal_mutable_outfilename();
  // @@protoc_insertion_point(field_mutable:com.genomics.protobuf.MessageCommand.outFilename)
  return _s;
}
inline const std::string& MessageCommand::_internal_outfilename() const {
  return _impl_.outfilename_.Get();
}
inline void MessageCommand::_internal_set_outfilename(const std::string& value) {
  ;


  _impl_.outfilename_.Set(value, GetArenaForAllocation());
}
inline std::string* MessageCommand::_internal_mutable_outfilename() {
  ;
  return _impl_.outfilename_.Mutable( GetArenaForAllocation());
}
inline std::string* MessageCommand::release_outfilename() {
  // @@protoc_insertion_point(field_release:com.genomics.protobuf.MessageCommand.outFilename)
  return _impl_.outfilename_.Release();
}
inline void MessageCommand::set_allocated_outfilename(std::string* value) {
  _impl_.outfilename_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.outfilename_.IsDefault()) {
          _impl_.outfilename_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.genomics.protobuf.MessageCommand.outFilename)
}

// -------------------------------------------------------------------

// MessageHeader

// uint32 version = 1;
inline void MessageHeader::clear_version() {
  _impl_.version_ = 0u;
}
inline ::uint32_t MessageHeader::version() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageHeader.version)
  return _internal_version();
}
inline void MessageHeader::set_version(::uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:com.genomics.protobuf.MessageHeader.version)
}
inline ::uint32_t MessageHeader::_internal_version() const {
  return _impl_.version_;
}
inline void MessageHeader::_internal_set_version(::uint32_t value) {
  ;
  _impl_.version_ = value;
}

// uint32 msgID = 2;
inline void MessageHeader::clear_msgid() {
  _impl_.msgid_ = 0u;
}
inline ::uint32_t MessageHeader::msgid() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageHeader.msgID)
  return _internal_msgid();
}
inline void MessageHeader::set_msgid(::uint32_t value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:com.genomics.protobuf.MessageHeader.msgID)
}
inline ::uint32_t MessageHeader::_internal_msgid() const {
  return _impl_.msgid_;
}
inline void MessageHeader::_internal_set_msgid(::uint32_t value) {
  ;
  _impl_.msgid_ = value;
}

// .com.genomics.protobuf.MsgType msgType = 3;
inline void MessageHeader::clear_msgtype() {
  _impl_.msgtype_ = 0;
}
inline ::com::genomics::protobuf::MsgType MessageHeader::msgtype() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageHeader.msgType)
  return _internal_msgtype();
}
inline void MessageHeader::set_msgtype(::com::genomics::protobuf::MsgType value) {
   _internal_set_msgtype(value);
  // @@protoc_insertion_point(field_set:com.genomics.protobuf.MessageHeader.msgType)
}
inline ::com::genomics::protobuf::MsgType MessageHeader::_internal_msgtype() const {
  return static_cast<::com::genomics::protobuf::MsgType>(_impl_.msgtype_);
}
inline void MessageHeader::_internal_set_msgtype(::com::genomics::protobuf::MsgType value) {
  ;
  _impl_.msgtype_ = value;
}

// -------------------------------------------------------------------

// MessageBody

// .com.genomics.protobuf.MessageRequest msgRequest = 1;
inline bool MessageBody::has_msgrequest() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.msgrequest_ != nullptr);
  return value;
}
inline void MessageBody::clear_msgrequest() {
  if (_impl_.msgrequest_ != nullptr) _impl_.msgrequest_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::genomics::protobuf::MessageRequest& MessageBody::_internal_msgrequest() const {
  const ::com::genomics::protobuf::MessageRequest* p = _impl_.msgrequest_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::genomics::protobuf::MessageRequest&>(
      ::com::genomics::protobuf::_MessageRequest_default_instance_);
}
inline const ::com::genomics::protobuf::MessageRequest& MessageBody::msgrequest() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageBody.msgRequest)
  return _internal_msgrequest();
}
inline void MessageBody::unsafe_arena_set_allocated_msgrequest(
    ::com::genomics::protobuf::MessageRequest* msgrequest) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.msgrequest_);
  }
  _impl_.msgrequest_ = msgrequest;
  if (msgrequest) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.genomics.protobuf.MessageBody.msgRequest)
}
inline ::com::genomics::protobuf::MessageRequest* MessageBody::release_msgrequest() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::genomics::protobuf::MessageRequest* temp = _impl_.msgrequest_;
  _impl_.msgrequest_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::genomics::protobuf::MessageRequest* MessageBody::unsafe_arena_release_msgrequest() {
  // @@protoc_insertion_point(field_release:com.genomics.protobuf.MessageBody.msgRequest)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::genomics::protobuf::MessageRequest* temp = _impl_.msgrequest_;
  _impl_.msgrequest_ = nullptr;
  return temp;
}
inline ::com::genomics::protobuf::MessageRequest* MessageBody::_internal_mutable_msgrequest() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.msgrequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::genomics::protobuf::MessageRequest>(GetArenaForAllocation());
    _impl_.msgrequest_ = p;
  }
  return _impl_.msgrequest_;
}
inline ::com::genomics::protobuf::MessageRequest* MessageBody::mutable_msgrequest() {
  ::com::genomics::protobuf::MessageRequest* _msg = _internal_mutable_msgrequest();
  // @@protoc_insertion_point(field_mutable:com.genomics.protobuf.MessageBody.msgRequest)
  return _msg;
}
inline void MessageBody::set_allocated_msgrequest(::com::genomics::protobuf::MessageRequest* msgrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.msgrequest_;
  }
  if (msgrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(msgrequest);
    if (message_arena != submessage_arena) {
      msgrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msgrequest, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.msgrequest_ = msgrequest;
  // @@protoc_insertion_point(field_set_allocated:com.genomics.protobuf.MessageBody.msgRequest)
}

// .com.genomics.protobuf.MessageResponse msgResponse = 2;
inline bool MessageBody::has_msgresponse() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.msgresponse_ != nullptr);
  return value;
}
inline void MessageBody::clear_msgresponse() {
  if (_impl_.msgresponse_ != nullptr) _impl_.msgresponse_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::com::genomics::protobuf::MessageResponse& MessageBody::_internal_msgresponse() const {
  const ::com::genomics::protobuf::MessageResponse* p = _impl_.msgresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::genomics::protobuf::MessageResponse&>(
      ::com::genomics::protobuf::_MessageResponse_default_instance_);
}
inline const ::com::genomics::protobuf::MessageResponse& MessageBody::msgresponse() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageBody.msgResponse)
  return _internal_msgresponse();
}
inline void MessageBody::unsafe_arena_set_allocated_msgresponse(
    ::com::genomics::protobuf::MessageResponse* msgresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.msgresponse_);
  }
  _impl_.msgresponse_ = msgresponse;
  if (msgresponse) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.genomics.protobuf.MessageBody.msgResponse)
}
inline ::com::genomics::protobuf::MessageResponse* MessageBody::release_msgresponse() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::genomics::protobuf::MessageResponse* temp = _impl_.msgresponse_;
  _impl_.msgresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::genomics::protobuf::MessageResponse* MessageBody::unsafe_arena_release_msgresponse() {
  // @@protoc_insertion_point(field_release:com.genomics.protobuf.MessageBody.msgResponse)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::genomics::protobuf::MessageResponse* temp = _impl_.msgresponse_;
  _impl_.msgresponse_ = nullptr;
  return temp;
}
inline ::com::genomics::protobuf::MessageResponse* MessageBody::_internal_mutable_msgresponse() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.msgresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::genomics::protobuf::MessageResponse>(GetArenaForAllocation());
    _impl_.msgresponse_ = p;
  }
  return _impl_.msgresponse_;
}
inline ::com::genomics::protobuf::MessageResponse* MessageBody::mutable_msgresponse() {
  ::com::genomics::protobuf::MessageResponse* _msg = _internal_mutable_msgresponse();
  // @@protoc_insertion_point(field_mutable:com.genomics.protobuf.MessageBody.msgResponse)
  return _msg;
}
inline void MessageBody::set_allocated_msgresponse(::com::genomics::protobuf::MessageResponse* msgresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.msgresponse_;
  }
  if (msgresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(msgresponse);
    if (message_arena != submessage_arena) {
      msgresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msgresponse, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.msgresponse_ = msgresponse;
  // @@protoc_insertion_point(field_set_allocated:com.genomics.protobuf.MessageBody.msgResponse)
}

// .com.genomics.protobuf.MessagePush msgPush = 3;
inline bool MessageBody::has_msgpush() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.msgpush_ != nullptr);
  return value;
}
inline void MessageBody::clear_msgpush() {
  if (_impl_.msgpush_ != nullptr) _impl_.msgpush_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::com::genomics::protobuf::MessagePush& MessageBody::_internal_msgpush() const {
  const ::com::genomics::protobuf::MessagePush* p = _impl_.msgpush_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::genomics::protobuf::MessagePush&>(
      ::com::genomics::protobuf::_MessagePush_default_instance_);
}
inline const ::com::genomics::protobuf::MessagePush& MessageBody::msgpush() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageBody.msgPush)
  return _internal_msgpush();
}
inline void MessageBody::unsafe_arena_set_allocated_msgpush(
    ::com::genomics::protobuf::MessagePush* msgpush) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.msgpush_);
  }
  _impl_.msgpush_ = msgpush;
  if (msgpush) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.genomics.protobuf.MessageBody.msgPush)
}
inline ::com::genomics::protobuf::MessagePush* MessageBody::release_msgpush() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::com::genomics::protobuf::MessagePush* temp = _impl_.msgpush_;
  _impl_.msgpush_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::genomics::protobuf::MessagePush* MessageBody::unsafe_arena_release_msgpush() {
  // @@protoc_insertion_point(field_release:com.genomics.protobuf.MessageBody.msgPush)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::com::genomics::protobuf::MessagePush* temp = _impl_.msgpush_;
  _impl_.msgpush_ = nullptr;
  return temp;
}
inline ::com::genomics::protobuf::MessagePush* MessageBody::_internal_mutable_msgpush() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.msgpush_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::genomics::protobuf::MessagePush>(GetArenaForAllocation());
    _impl_.msgpush_ = p;
  }
  return _impl_.msgpush_;
}
inline ::com::genomics::protobuf::MessagePush* MessageBody::mutable_msgpush() {
  ::com::genomics::protobuf::MessagePush* _msg = _internal_mutable_msgpush();
  // @@protoc_insertion_point(field_mutable:com.genomics.protobuf.MessageBody.msgPush)
  return _msg;
}
inline void MessageBody::set_allocated_msgpush(::com::genomics::protobuf::MessagePush* msgpush) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.msgpush_;
  }
  if (msgpush) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(msgpush);
    if (message_arena != submessage_arena) {
      msgpush = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msgpush, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.msgpush_ = msgpush;
  // @@protoc_insertion_point(field_set_allocated:com.genomics.protobuf.MessageBody.msgPush)
}

// .com.genomics.protobuf.MessagePull msgPull = 4;
inline bool MessageBody::has_msgpull() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.msgpull_ != nullptr);
  return value;
}
inline void MessageBody::clear_msgpull() {
  if (_impl_.msgpull_ != nullptr) _impl_.msgpull_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::com::genomics::protobuf::MessagePull& MessageBody::_internal_msgpull() const {
  const ::com::genomics::protobuf::MessagePull* p = _impl_.msgpull_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::genomics::protobuf::MessagePull&>(
      ::com::genomics::protobuf::_MessagePull_default_instance_);
}
inline const ::com::genomics::protobuf::MessagePull& MessageBody::msgpull() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageBody.msgPull)
  return _internal_msgpull();
}
inline void MessageBody::unsafe_arena_set_allocated_msgpull(
    ::com::genomics::protobuf::MessagePull* msgpull) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.msgpull_);
  }
  _impl_.msgpull_ = msgpull;
  if (msgpull) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.genomics.protobuf.MessageBody.msgPull)
}
inline ::com::genomics::protobuf::MessagePull* MessageBody::release_msgpull() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::com::genomics::protobuf::MessagePull* temp = _impl_.msgpull_;
  _impl_.msgpull_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::genomics::protobuf::MessagePull* MessageBody::unsafe_arena_release_msgpull() {
  // @@protoc_insertion_point(field_release:com.genomics.protobuf.MessageBody.msgPull)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::com::genomics::protobuf::MessagePull* temp = _impl_.msgpull_;
  _impl_.msgpull_ = nullptr;
  return temp;
}
inline ::com::genomics::protobuf::MessagePull* MessageBody::_internal_mutable_msgpull() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.msgpull_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::genomics::protobuf::MessagePull>(GetArenaForAllocation());
    _impl_.msgpull_ = p;
  }
  return _impl_.msgpull_;
}
inline ::com::genomics::protobuf::MessagePull* MessageBody::mutable_msgpull() {
  ::com::genomics::protobuf::MessagePull* _msg = _internal_mutable_msgpull();
  // @@protoc_insertion_point(field_mutable:com.genomics.protobuf.MessageBody.msgPull)
  return _msg;
}
inline void MessageBody::set_allocated_msgpull(::com::genomics::protobuf::MessagePull* msgpull) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.msgpull_;
  }
  if (msgpull) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(msgpull);
    if (message_arena != submessage_arena) {
      msgpull = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msgpull, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.msgpull_ = msgpull;
  // @@protoc_insertion_point(field_set_allocated:com.genomics.protobuf.MessageBody.msgPull)
}

// .com.genomics.protobuf.MessageCommand msgCommand = 5;
inline bool MessageBody::has_msgcommand() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.msgcommand_ != nullptr);
  return value;
}
inline void MessageBody::clear_msgcommand() {
  if (_impl_.msgcommand_ != nullptr) _impl_.msgcommand_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::com::genomics::protobuf::MessageCommand& MessageBody::_internal_msgcommand() const {
  const ::com::genomics::protobuf::MessageCommand* p = _impl_.msgcommand_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::genomics::protobuf::MessageCommand&>(
      ::com::genomics::protobuf::_MessageCommand_default_instance_);
}
inline const ::com::genomics::protobuf::MessageCommand& MessageBody::msgcommand() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageBody.msgCommand)
  return _internal_msgcommand();
}
inline void MessageBody::unsafe_arena_set_allocated_msgcommand(
    ::com::genomics::protobuf::MessageCommand* msgcommand) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.msgcommand_);
  }
  _impl_.msgcommand_ = msgcommand;
  if (msgcommand) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.genomics.protobuf.MessageBody.msgCommand)
}
inline ::com::genomics::protobuf::MessageCommand* MessageBody::release_msgcommand() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::com::genomics::protobuf::MessageCommand* temp = _impl_.msgcommand_;
  _impl_.msgcommand_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::genomics::protobuf::MessageCommand* MessageBody::unsafe_arena_release_msgcommand() {
  // @@protoc_insertion_point(field_release:com.genomics.protobuf.MessageBody.msgCommand)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::com::genomics::protobuf::MessageCommand* temp = _impl_.msgcommand_;
  _impl_.msgcommand_ = nullptr;
  return temp;
}
inline ::com::genomics::protobuf::MessageCommand* MessageBody::_internal_mutable_msgcommand() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.msgcommand_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::genomics::protobuf::MessageCommand>(GetArenaForAllocation());
    _impl_.msgcommand_ = p;
  }
  return _impl_.msgcommand_;
}
inline ::com::genomics::protobuf::MessageCommand* MessageBody::mutable_msgcommand() {
  ::com::genomics::protobuf::MessageCommand* _msg = _internal_mutable_msgcommand();
  // @@protoc_insertion_point(field_mutable:com.genomics.protobuf.MessageBody.msgCommand)
  return _msg;
}
inline void MessageBody::set_allocated_msgcommand(::com::genomics::protobuf::MessageCommand* msgcommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.msgcommand_;
  }
  if (msgcommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(msgcommand);
    if (message_arena != submessage_arena) {
      msgcommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msgcommand, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.msgcommand_ = msgcommand;
  // @@protoc_insertion_point(field_set_allocated:com.genomics.protobuf.MessageBody.msgCommand)
}

// -------------------------------------------------------------------

// MessageInfo

// .com.genomics.protobuf.MessageHeader msgHeader = 1;
inline bool MessageInfo::has_msgheader() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.msgheader_ != nullptr);
  return value;
}
inline void MessageInfo::clear_msgheader() {
  if (_impl_.msgheader_ != nullptr) _impl_.msgheader_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::genomics::protobuf::MessageHeader& MessageInfo::_internal_msgheader() const {
  const ::com::genomics::protobuf::MessageHeader* p = _impl_.msgheader_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::genomics::protobuf::MessageHeader&>(
      ::com::genomics::protobuf::_MessageHeader_default_instance_);
}
inline const ::com::genomics::protobuf::MessageHeader& MessageInfo::msgheader() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageInfo.msgHeader)
  return _internal_msgheader();
}
inline void MessageInfo::unsafe_arena_set_allocated_msgheader(
    ::com::genomics::protobuf::MessageHeader* msgheader) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.msgheader_);
  }
  _impl_.msgheader_ = msgheader;
  if (msgheader) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.genomics.protobuf.MessageInfo.msgHeader)
}
inline ::com::genomics::protobuf::MessageHeader* MessageInfo::release_msgheader() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::genomics::protobuf::MessageHeader* temp = _impl_.msgheader_;
  _impl_.msgheader_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::genomics::protobuf::MessageHeader* MessageInfo::unsafe_arena_release_msgheader() {
  // @@protoc_insertion_point(field_release:com.genomics.protobuf.MessageInfo.msgHeader)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::genomics::protobuf::MessageHeader* temp = _impl_.msgheader_;
  _impl_.msgheader_ = nullptr;
  return temp;
}
inline ::com::genomics::protobuf::MessageHeader* MessageInfo::_internal_mutable_msgheader() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.msgheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::genomics::protobuf::MessageHeader>(GetArenaForAllocation());
    _impl_.msgheader_ = p;
  }
  return _impl_.msgheader_;
}
inline ::com::genomics::protobuf::MessageHeader* MessageInfo::mutable_msgheader() {
  ::com::genomics::protobuf::MessageHeader* _msg = _internal_mutable_msgheader();
  // @@protoc_insertion_point(field_mutable:com.genomics.protobuf.MessageInfo.msgHeader)
  return _msg;
}
inline void MessageInfo::set_allocated_msgheader(::com::genomics::protobuf::MessageHeader* msgheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.msgheader_;
  }
  if (msgheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(msgheader);
    if (message_arena != submessage_arena) {
      msgheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msgheader, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.msgheader_ = msgheader;
  // @@protoc_insertion_point(field_set_allocated:com.genomics.protobuf.MessageInfo.msgHeader)
}

// .com.genomics.protobuf.MessageBody msgBody = 2;
inline bool MessageInfo::has_msgbody() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.msgbody_ != nullptr);
  return value;
}
inline void MessageInfo::clear_msgbody() {
  if (_impl_.msgbody_ != nullptr) _impl_.msgbody_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::com::genomics::protobuf::MessageBody& MessageInfo::_internal_msgbody() const {
  const ::com::genomics::protobuf::MessageBody* p = _impl_.msgbody_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::genomics::protobuf::MessageBody&>(
      ::com::genomics::protobuf::_MessageBody_default_instance_);
}
inline const ::com::genomics::protobuf::MessageBody& MessageInfo::msgbody() const {
  // @@protoc_insertion_point(field_get:com.genomics.protobuf.MessageInfo.msgBody)
  return _internal_msgbody();
}
inline void MessageInfo::unsafe_arena_set_allocated_msgbody(
    ::com::genomics::protobuf::MessageBody* msgbody) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.msgbody_);
  }
  _impl_.msgbody_ = msgbody;
  if (msgbody) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.genomics.protobuf.MessageInfo.msgBody)
}
inline ::com::genomics::protobuf::MessageBody* MessageInfo::release_msgbody() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::genomics::protobuf::MessageBody* temp = _impl_.msgbody_;
  _impl_.msgbody_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::genomics::protobuf::MessageBody* MessageInfo::unsafe_arena_release_msgbody() {
  // @@protoc_insertion_point(field_release:com.genomics.protobuf.MessageInfo.msgBody)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::genomics::protobuf::MessageBody* temp = _impl_.msgbody_;
  _impl_.msgbody_ = nullptr;
  return temp;
}
inline ::com::genomics::protobuf::MessageBody* MessageInfo::_internal_mutable_msgbody() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.msgbody_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::genomics::protobuf::MessageBody>(GetArenaForAllocation());
    _impl_.msgbody_ = p;
  }
  return _impl_.msgbody_;
}
inline ::com::genomics::protobuf::MessageBody* MessageInfo::mutable_msgbody() {
  ::com::genomics::protobuf::MessageBody* _msg = _internal_mutable_msgbody();
  // @@protoc_insertion_point(field_mutable:com.genomics.protobuf.MessageInfo.msgBody)
  return _msg;
}
inline void MessageInfo::set_allocated_msgbody(::com::genomics::protobuf::MessageBody* msgbody) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.msgbody_;
  }
  if (msgbody) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(msgbody);
    if (message_arena != submessage_arena) {
      msgbody = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msgbody, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.msgbody_ = msgbody;
  // @@protoc_insertion_point(field_set_allocated:com.genomics.protobuf.MessageInfo.msgBody)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace genomics
}  // namespace com


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::com::genomics::protobuf::MsgType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::com::genomics::protobuf::MsgType>() {
  return ::com::genomics::protobuf::MsgType_descriptor();
}
template <>
struct is_proto_enum<::com::genomics::protobuf::RequestType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::com::genomics::protobuf::RequestType>() {
  return ::com::genomics::protobuf::RequestType_descriptor();
}
template <>
struct is_proto_enum<::com::genomics::protobuf::ResponseType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::com::genomics::protobuf::ResponseType>() {
  return ::com::genomics::protobuf::ResponseType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_MessageInfo_2eproto_2epb_2eh
